name: demo-live-smoke-ctrader

on:
  workflow_dispatch:
    inputs:
      useHostedFallback:
        description: 'Use hosted fallback runner if self-hosted is unavailable'
        required: false
        default: false
        type: boolean
      dryRun:
        description: 'Dry run mode (skip live trading)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  issues: write
  statuses: write

jobs:
  demo-live-smoke-ctrader:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    timeout-minutes: 30
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: pwsh
    environment: ctrader-demo
    env:
      RUN_ID: DEMO-CTRADER-LIVE-SMOKE
      DRY_RUN: ${{ github.event_name == 'schedule' && 'false' || inputs.dryRun }}
      CT_APP_ID: ${{ secrets.CT_APP_ID }}
      CT_APP_SECRET: ${{ secrets.CT_APP_SECRET }}
      CT_DEMO_OAUTH_TOKEN: ${{ secrets.CT_DEMO_OAUTH_TOKEN }}
      CT_DEMO_REFRESH_TOKEN: ${{ secrets.CT_DEMO_REFRESH_TOKEN }}
      CT_DEMO_ACCOUNT_ID: ${{ secrets.CT_DEMO_ACCOUNT_ID }}
      CT_DEMO_BROKER: ${{ secrets.CT_DEMO_BROKER }}
    steps:
      - name: Install PowerShell 7
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          POWERSHELL_VERSION="7.4.6"
          INSTALL_ROOT="$HOME/powershell"

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
            exit 0
          fi

          if [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
            exit 0
          fi

          mkdir -p "$INSTALL_ROOT"
          curl -sSL -o powershell.tar.gz "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz"
          tar -xzf powershell.tar.gz -C "$INSTALL_ROOT"
          rm powershell.tar.gz

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/pwsh"
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
          elif [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh"
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
          else
            echo "Failed to locate pwsh after extraction" >&2
            find "$INSTALL_ROOT" -maxdepth 3 -type f -name 'pwsh' -print || true
            exit 1
          fi

      - name: Checkout
        id: checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Relax PowerShell execution policy
        id: relax_policy
        run: |
          try {
            Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force -ErrorAction Stop
            Write-Host 'Execution policy set to RemoteSigned for CurrentUser.'
          } catch {
            Write-Warning "Execution policy change failed or is overridden: $($_.Exception.Message)"
          }

      - name: Setup .NET 8
        id: setup_dotnet
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
        with:
          dotnet-version: '8.0.x'

      - name: Preflight Values Checklist
        id: preflight
        run: |
          $ErrorActionPreference = 'Stop'
          $workspace = $env:GITHUB_WORKSPACE
          $summary = @()
          $summary += "| Check | Status |"
          $summary += "|-------|--------|"
          # CT_APP_ID
          if ($env:CT_APP_ID) {
            echo "App ID present"
            $summary += "| App ID | ✅ |"
          } else {
            $summary += "| App ID | ❌ |"
            throw "Preflight failed: CT_APP_ID missing"
          }
          # Account mode guard
          if ($env:RUN_ID -notmatch 'DEMO') {
            $summary += "| Account mode | ❌ |"
            throw "Preflight failed: RUN_ID must indicate demo mode"
          } else {
            $summary += "| Account mode | ✅ |"
          }
          # CT_APP_SECRET
          if ($env:CT_APP_SECRET) {
            echo "Client secret present"
            $summary += "| Client secret | ✅ |"
          } else {
            $summary += "| Client secret | ❌ |"
            throw "Preflight failed: CT_APP_SECRET missing"
          }
          # CT_DEMO_OAUTH_TOKEN
          if ($env:CT_DEMO_OAUTH_TOKEN) {
            echo "Access token present"
            $summary += "| Access token | ✅ |"
            if ($env:CT_DEMO_OAUTH_TOKEN -match '\.') {
              $parts = $env:CT_DEMO_OAUTH_TOKEN.Split('.')
              if ($parts.Length -ge 2) {
                try {
                  $payloadJson = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($parts[1].Replace('-', '+').Replace('_', '/').PadRight($parts[1].Length + (4 - ($parts[1].Length % 4)) % 4, '=')))
                  $payload = $payloadJson | ConvertFrom-Json
                  if ($payload.exp) {
                    $expiry = [DateTimeOffset]::FromUnixTimeSeconds([int64]$payload.exp).UtcDateTime
                    $now = [DateTime]::UtcNow
                    $days = ($expiry - $now).TotalDays
                    if ($days -le 0) {
                      throw "Preflight failed: CT_DEMO_OAUTH_TOKEN appears expired"
                    }
                    $summary += "| Access token expiry (days) | $([Math]::Floor($days)) |"
                  }
                } catch {
                  Write-Warning "Unable to parse token expiry: $($_.Exception.Message)"
                }
              }
            }
          } else {
            $summary += "| Access token | ❌ |"
            throw "Preflight failed: CT_DEMO_OAUTH_TOKEN missing"
          }
          # CT_DEMO_REFRESH_TOKEN
          if ($env:CT_DEMO_REFRESH_TOKEN) {
            echo "Refresh token present"
            $summary += "| Refresh token | ✅ |"
          } else {
            $summary += "| Refresh token | ❌ |"
            throw "Preflight failed: CT_DEMO_REFRESH_TOKEN missing"
          }
          # CT_DEMO_ACCOUNT_ID
          if ($env:CT_DEMO_ACCOUNT_ID) {
            $numeric = $env:CT_DEMO_ACCOUNT_ID -match '^\d+$'
            if ($numeric) {
              $numericLabel = 'YES'
            } else {
              $numericLabel = 'NO'
            }
            echo "Account ID present; numeric=$numericLabel"
            if ($numeric) {
              $summary += "| Account ID | ✅ |"
            } else {
              $summary += "| Account ID | ❌ |"
              throw "Preflight failed: CT_DEMO_ACCOUNT_ID not numeric"
            }
          } else {
            echo "Account ID present; numeric=NO"
            $summary += "| Account ID | ❌ |"
            throw "Preflight failed: CT_DEMO_ACCOUNT_ID missing"
          }
          # CT_DEMO_BROKER
          if ($env:CT_DEMO_BROKER) {
            $firstTwo = $env:CT_DEMO_BROKER.Substring(0, [Math]::Min(2, $env:CT_DEMO_BROKER.Length))
            echo "broker=${firstTwo}… (present)"
            $summary += "| Broker | ✅ |"
          } else {
            echo "broker= (missing)"
            $summary += "| Broker | ❌ |"
            throw "Preflight failed: CT_DEMO_BROKER missing"
          }
          echo "Environment = demo"
          $summary += "| Environment | demo |"
          $summaryPath = Join-Path $workspace 'preflight.sanity.txt'
          # Write summary
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          # Write artifact
          $summary | Out-File -FilePath $summaryPath -Encoding utf8
          Write-Host "Preflight summary written to $summaryPath"
          if ($env:DRY_RUN -eq 'false') {
            Write-Host 'Live trading mode confirmed for this run.'
          } else {
            Write-Host 'Dry run mode confirmed; live trading disabled.'
          }

      - name: Restore and build Release
        id: restore_build
        run: |
          $ErrorActionPreference = 'Stop'
          & dotnet tool update --global dotnet-reportgenerator-globaltool *> $null
          & dotnet restore TiYf.Engine.sln
          if ($LASTEXITCODE -ne 0) { throw "dotnet restore failed" }
          & dotnet build TiYf.Engine.sln -c Release --no-restore --nologo
          if ($LASTEXITCODE -ne 0) { throw "dotnet build failed" }

      - name: Run DemoFeed
        id: run_demofeed
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'demo-ctrader.log'
          $args = @('--run-id', $env:RUN_ID, '--broker-enabled', 'true', '--broker-fill-mode', 'ioc-market')
          $maxAttempts = 2
          $delaySeconds = 15
          $success = $false
          $eventsPath = $null
          $tradesPath = $null
          $runDirectory = $null
          $brokerDangling = 'unknown'

          for ($attempt = 1; $attempt -le $maxAttempts -and -not $success; $attempt++) {
            if (Test-Path -Path $logPath) {
              Remove-Item -Path $logPath -Force
            }

            dotnet exec src/TiYf.Engine.DemoFeed/bin/Release/net8.0/TiYf.Engine.DemoFeed.dll @args | Tee-Object -FilePath $logPath
            $exitCode = $LASTEXITCODE
            $eventsLine = $null
            $tradesLine = $null
            $runDirLine = $null
            $infoLine = $null

            if ($exitCode -eq 0) {
              $eventsLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_EVENTS='
              $tradesLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_TRADES='
              $runDirLine = Select-String -Path $logPath -Pattern '^RUN_DIR='
              $infoLine = Select-String -Path $logPath -Pattern '^INFO first_ts='
            }

            if ($exitCode -eq 0 -and $eventsLine -and $tradesLine -and $runDirLine -and $infoLine) {
              $eventsPath = ($eventsLine | Select-Object -First 1).Line.Split('=')[1]
              $tradesPath = ($tradesLine | Select-Object -First 1).Line.Split('=')[1]
              $runDirectory = ($runDirLine | Select-Object -First 1).Line.Split('=')[1]
              $brokerDangling = if ($infoLine -match 'broker_dangling=(true|false)') { $matches[1] } else { 'unknown' }
              $success = $true
            } else {
              if ($attempt -lt $maxAttempts) {
                Write-Warning "DemoFeed attempt $attempt failed (exit $exitCode). Retrying in $delaySeconds seconds..."
                Start-Sleep -Seconds $delaySeconds
              }
            }
          }

          if (-not $success) {
            throw "DemoFeed failed after $maxAttempts attempts; inspect demo-ctrader.log"
          }

          if ([string]::IsNullOrWhiteSpace($brokerDangling) -or $brokerDangling -ne 'false') {
            throw "broker_dangling is not false: $brokerDangling"
          }

          "EVENTS_PATH=$eventsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_PATH=$tradesPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RUN_DIR=$runDirectory" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "BROKER_DANGLING=$brokerDangling" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Strict
        id: verify_strict
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'strict.json'
          $strictExit = $LASTEXITCODE
          if ($strictExit -ne 0) { throw "verify strict exited with $strictExit" }
          "STRICT_EXIT=$strictExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Parity
        id: verify_parity
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'parity.json'
          $parityExit = $LASTEXITCODE
          if ($parityExit -ne 0) { throw "verify parity exited with $parityExit" }
          "PARITY_EXIT=$parityExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Collect Artifacts
        id: collect_artifacts
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          $ErrorActionPreference = 'Stop'
          $artifactDir = Join-Path $PWD.Path 'artifacts'
          New-Item -ItemType Directory -Path $artifactDir -Force | Out-Null

          function Copy-Or-Placeholder {
            param(
              [string]$Source,
              [string]$Destination
            )

            if (-not [string]::IsNullOrWhiteSpace($Source) -and (Test-Path -Path $Source)) {
              Copy-Item -Path $Source -Destination $Destination -Force
            } else {
              New-Item -ItemType File -Path $Destination -Force | Out-Null
            }
          }

          Copy-Or-Placeholder -Source $env:EVENTS_PATH -Destination (Join-Path $artifactDir 'events.csv')
          Copy-Or-Placeholder -Source $env:TRADES_PATH -Destination (Join-Path $artifactDir 'trades.csv')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'strict.json') -Destination (Join-Path $artifactDir 'strict.json')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'parity.json') -Destination (Join-Path $artifactDir 'parity.json')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'demo-ctrader.log') -Destination (Join-Path $artifactDir 'demo-ctrader.log')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'preflight.sanity.txt') -Destination (Join-Path $artifactDir 'preflight.sanity.txt')

      - name: Summarize Results
        id: summarize_results
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          $ErrorActionPreference = 'Stop'

          function Resolve-Value {
            param([string]$Value)
            if ([string]::IsNullOrWhiteSpace($Value)) {
              return 'unknown'
            }
            return $Value
          }

          function Resolve-Hash {
            param([string]$Path)
            if (-not [string]::IsNullOrWhiteSpace($Path) -and (Test-Path -Path $Path)) {
              return (Get-FileHash -Algorithm SHA256 -Path $Path).Hash.ToUpperInvariant()
            }
            return 'unknown'
          }

          $strictExit = Resolve-Value $env:STRICT_EXIT
          $parityExit = Resolve-Value $env:PARITY_EXIT
          $brokerDangling = Resolve-Value $env:BROKER_DANGLING
          $eventsHash = Resolve-Hash $env:EVENTS_PATH
          $tradesHash = Resolve-Hash $env:TRADES_PATH

          $resultLine = "STRICT_EXIT=$strictExit; PARITY_EXIT=$parityExit; broker_dangling=$brokerDangling; events_sha=$eventsHash; trades_sha=$tradesHash"
          Write-Host $resultLine
          $resultLine | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          "Artifacts retained for 30 days (repository default)." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          "RESULT_LINE=$resultLine" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "EVENTS_SHA=$eventsHash" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_SHA=$tradesHash" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Write checks.csv
        id: write_checks
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          $ErrorActionPreference = 'Stop'
          $workspace = $env:GITHUB_WORKSPACE
          $artifactDir = Join-Path $workspace 'artifacts'
          if (-not (Test-Path -Path $artifactDir)) {
            New-Item -ItemType Directory -Path $artifactDir -Force | Out-Null
          }
          $csvPath = Join-Path $workspace 'checks.csv'
          $timestamp = [DateTime]::UtcNow.ToString('o')
          $runner = if ([string]::IsNullOrWhiteSpace($env:RUNNER_NAME)) { 'unknown' } else { $env:RUNNER_NAME }
          $strictExit = if ([string]::IsNullOrWhiteSpace($env:STRICT_EXIT)) { 'unknown' } else { $env:STRICT_EXIT }
          $parityExit = if ([string]::IsNullOrWhiteSpace($env:PARITY_EXIT)) { 'unknown' } else { $env:PARITY_EXIT }
          $brokerDangling = if ([string]::IsNullOrWhiteSpace($env:BROKER_DANGLING)) { 'unknown' } else { $env:BROKER_DANGLING }
          $eventsHash = if ([string]::IsNullOrWhiteSpace($env:EVENTS_SHA)) { 'unknown' } else { $env:EVENTS_SHA }
          $tradesHash = if ([string]::IsNullOrWhiteSpace($env:TRADES_SHA)) { 'unknown' } else { $env:TRADES_SHA }
          "timestamp,strict_exit,parity_exit,broker_dangling,events_sha,trades_sha,runner" | Out-File -FilePath $csvPath -Encoding utf8
          "$timestamp,$strictExit,$parityExit,$brokerDangling,$eventsHash,$tradesHash,$runner" | Out-File -FilePath $csvPath -Encoding utf8 -Append

      - name: Check artifact payload
        id: check_artifacts
        if: always()
        run: |
          $ErrorActionPreference = 'Continue'
          $workspace = $env:GITHUB_WORKSPACE
          $artifactDir = Join-Path $workspace 'artifacts'
          Write-Host "Workspace root: $workspace"
          if (Test-Path $artifactDir) {
            Write-Host ("Contents of {0}:" -f $artifactDir)
            Get-ChildItem -Path $artifactDir
          } else {
            Write-Warning "Artifact directory missing: $artifactDir"
          }
          $checksPath = Join-Path $workspace 'checks.csv'
          if (Test-Path $checksPath) {
            Write-Host "checks.csv present at $checksPath"
          } else {
            Write-Warning "checks.csv missing at $checksPath"
            "WARNING: checks.csv missing before upload at $checksPath" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }

      - name: Upload Artifacts
        id: upload_artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-live-smoke-ctrader-${{ env.RUN_ID }}
          path: |
            ${{ github.workspace }}/artifacts
            ${{ github.workspace }}/checks.csv
          retention-days: 30

      - name: Capture failure context
        id: capture_failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const orderedSteps = [
              { name: 'Checkout', outcome: '${{ steps.checkout.outcome }}' },
              { name: 'Relax PowerShell execution policy', outcome: '${{ steps.relax_policy.outcome }}' },
              { name: 'Setup .NET 8', outcome: '${{ steps.setup_dotnet.outcome }}' },
              { name: 'Preflight Values Checklist', outcome: '${{ steps.preflight.outcome }}' },
              { name: 'Restore and build Release', outcome: '${{ steps.restore_build.outcome }}' },
              { name: 'Run DemoFeed', outcome: '${{ steps.run_demofeed.outcome }}' },
              { name: 'Verify Strict', outcome: '${{ steps.verify_strict.outcome }}' },
              { name: 'Verify Parity', outcome: '${{ steps.verify_parity.outcome }}' },
              { name: 'Collect Artifacts', outcome: '${{ steps.collect_artifacts.outcome }}' },
              { name: 'Summarize Results', outcome: '${{ steps.summarize_results.outcome }}' }
            ];

            const failed = orderedSteps.find(step => step.outcome === 'failure');
            const firstFailure = failed ? failed.name : 'Unknown step';
            core.setOutput('firstFailure', firstFailure);
            core.exportVariable('FIRST_FAILURE_STEP', firstFailure);

      - name: Update Demo Session issue
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const firstFailure = process.env.FIRST_FAILURE_STEP || 'Unknown step';
            const resultLine = process.env.RESULT_LINE || 'UNKNOWN RESULT LINE';
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const title = 'Demo Session';

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            const target = issues.find(issue => issue.title === title);

            const body = `Failure detected in demo-live-smoke-ctrader.\n\n- Run: ${artifactUrl}\n- First failing step: ${firstFailure}\n- Result: ${resultLine}`;

            if (target) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: target.number,
                body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ['ci:red']
              });
            }

      - name: Send ops webhook
        if: failure()
        run: |
          $webhook = "${{ secrets.DEMO_ALERT_WEBHOOK }}"
          if ([string]::IsNullOrWhiteSpace($webhook) -or $webhook -eq 'null') {
            Write-Host 'DEMO_ALERT_WEBHOOK not configured; skipping alert.'
            return
          }
          $payload = @{
            text = "Demo smoke run failed on $env:GITHUB_RUN_ID. Result: $env:RESULT_LINE"
          } | ConvertTo-Json -Compress
          try {
            Invoke-RestMethod -Uri $webhook -Method Post -Body $payload -ContentType 'application/json'
          } catch {
            Write-Warning "Failed to send webhook notification: $($_.Exception.Message)"
          }

      - name: Set commit status (ci:red)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxLength = 140;
            const rawDescription = process.env.RESULT_LINE || 'Demo smoke failed';
            const description = rawDescription.length > maxLength
              ? `${rawDescription.slice(0, maxLength - 3)}...`
              : rawDescription;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              context: 'ci:red',
              description,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Set commit status (ci:green)
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxLength = 140;
            const rawDescription = process.env.RESULT_LINE || 'Demo smoke succeeded';
            const description = rawDescription.length > maxLength
              ? `${rawDescription.slice(0, maxLength - 3)}...`
              : rawDescription;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'ci:green',
              description,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

concurrency:
  group: demo-live-smoke-ctrader
  cancel-in-progress: true

