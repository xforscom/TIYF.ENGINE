name: demo-live-smoke-ctrader

on:
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry run mode (skip live trading)'
        required: false
        default: true
        type: boolean

permissions:
  contents: read

jobs:
  demo-live-smoke-ctrader:
    runs-on: self-hosted
    timeout-minutes: 30
    defaults:
      run:
        shell: powershell
    environment: ctrader-demo
    env:
      RUN_ID: DEMO-CTRADER-LIVE-SMOKE
      DRY_RUN: ${{ inputs.dryRun }}
      CT_APP_ID: ${{ secrets.CT_APP_ID }}
      CT_APP_SECRET: ${{ secrets.CT_APP_SECRET }}
      CT_DEMO_OAUTH_TOKEN: ${{ secrets.CT_DEMO_OAUTH_TOKEN }}
      CT_DEMO_REFRESH_TOKEN: ${{ secrets.CT_DEMO_REFRESH_TOKEN }}
      CT_DEMO_ACCOUNT_ID: ${{ secrets.CT_DEMO_ACCOUNT_ID }}
      CT_DEMO_BROKER: ${{ secrets.CT_DEMO_BROKER }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Relax PowerShell execution policy
        run: |
          try {
            Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force -ErrorAction Stop
            Write-Host 'Execution policy set to RemoteSigned for CurrentUser.'
          } catch {
            Write-Warning "Execution policy change failed or is overridden: $($_.Exception.Message)"
          }

      - name: Configure .NET install directory
        shell: cmd
        run: |
          set "INSTALL_DIR=%RUNNER_TEMP%\dotnet"
          if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
          echo DOTNET_INSTALL_DIR=%INSTALL_DIR%>> "%GITHUB_ENV%"

      - name: Setup .NET 8
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
        with:
          dotnet-version: '8.0.x'

      - name: Preflight Values Checklist
        run: |
          $ErrorActionPreference = 'Stop'
          $workspace = $env:GITHUB_WORKSPACE
          $summary = @()
          $summary += "| Check | Status |"
          $summary += "|-------|--------|"
          # CT_APP_ID
          if ($env:CT_APP_ID) {
            echo "App ID present"
            $summary += "| App ID | ✅ |"
          } else {
            $summary += "| App ID | ❌ |"
            throw "Preflight failed: CT_APP_ID missing"
          }
          # CT_APP_SECRET
          if ($env:CT_APP_SECRET) {
            echo "Client secret present"
            $summary += "| Client secret | ✅ |"
          } else {
            $summary += "| Client secret | ❌ |"
            throw "Preflight failed: CT_APP_SECRET missing"
          }
          # CT_DEMO_OAUTH_TOKEN
          if ($env:CT_DEMO_OAUTH_TOKEN) {
            echo "Access token present"
            $summary += "| Access token | ✅ |"
          } else {
            $summary += "| Access token | ❌ |"
            throw "Preflight failed: CT_DEMO_OAUTH_TOKEN missing"
          }
          # CT_DEMO_REFRESH_TOKEN
          if ($env:CT_DEMO_REFRESH_TOKEN) {
            echo "Refresh token present"
            $summary += "| Refresh token | ✅ |"
          } else {
            $summary += "| Refresh token | ❌ |"
            throw "Preflight failed: CT_DEMO_REFRESH_TOKEN missing"
          }
          # CT_DEMO_ACCOUNT_ID
          if ($env:CT_DEMO_ACCOUNT_ID) {
            $numeric = $env:CT_DEMO_ACCOUNT_ID -match '^\d+$'
            if ($numeric) {
              $numericLabel = 'YES'
            } else {
              $numericLabel = 'NO'
            }
            echo "Account ID present; numeric=$numericLabel"
            if ($numeric) {
              $summary += "| Account ID | ✅ |"
            } else {
              $summary += "| Account ID | ❌ |"
              throw "Preflight failed: CT_DEMO_ACCOUNT_ID not numeric"
            }
          } else {
            echo "Account ID present; numeric=NO"
            $summary += "| Account ID | ❌ |"
            throw "Preflight failed: CT_DEMO_ACCOUNT_ID missing"
          }
          # CT_DEMO_BROKER
          if ($env:CT_DEMO_BROKER) {
            $firstTwo = $env:CT_DEMO_BROKER.Substring(0, [Math]::Min(2, $env:CT_DEMO_BROKER.Length))
            echo "broker=${firstTwo}… (present)"
            $summary += "| Broker | ✅ |"
          } else {
            echo "broker= (missing)"
            $summary += "| Broker | ❌ |"
            throw "Preflight failed: CT_DEMO_BROKER missing"
          }
          echo "Environment = demo"
          $summary += "| Environment | demo |"
          $summaryPath = Join-Path $workspace 'preflight.sanity.txt'
          # Write summary
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          # Write artifact
          $summary | Out-File -FilePath $summaryPath -Encoding utf8
          Write-Host "Preflight summary written to $summaryPath"
          if ($env:DRY_RUN -eq 'false') {
            Write-Host 'Live trading mode confirmed for this run.'
          } else {
            Write-Host 'Dry run mode confirmed; live trading disabled.'
          }

      - name: Restore and build Release
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release --no-restore --nologo

      - name: Run DemoFeed
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'demo-ctrader.log'
          $args = @('--run-id', $env:RUN_ID, '--broker-enabled', 'true', '--broker-fill-mode', 'ioc-market')
          dotnet exec src/TiYf.Engine.DemoFeed/bin/Release/net8.0/TiYf.Engine.DemoFeed.dll @args | Tee-Object -FilePath $logPath
          $exitCode = $LASTEXITCODE
          if ($exitCode -ne 0) { throw "DemoFeed exited with $exitCode" }
          $eventsLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_EVENTS='
          $tradesLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_TRADES='
          $runDirLine = Select-String -Path $logPath -Pattern '^RUN_DIR='
          $infoLine = Select-String -Path $logPath -Pattern '^INFO first_ts='
          if (-not $eventsLine -or -not $tradesLine -or -not $runDirLine -or -not $infoLine) { throw "Missing output lines" }
          $eventsPath = ($eventsLine | Select-Object -First 1).Line.Split('=')[1]
          $tradesPath = ($tradesLine | Select-Object -First 1).Line.Split('=')[1]
          $runDirectory = ($runDirLine | Select-Object -First 1).Line.Split('=')[1]
          $brokerDangling = if ($infoLine -match 'broker_dangling=(true|false)') { $matches[1] } else { 'unknown' }
          if ($brokerDangling -ne 'false') { throw "broker_dangling is not false: $brokerDangling" }
          "EVENTS_PATH=$eventsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_PATH=$tradesPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RUN_DIR=$runDirectory" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "BROKER_DANGLING=$brokerDangling" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Strict
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'strict.json'
          $strictExit = $LASTEXITCODE
          if ($strictExit -ne 0) { throw "verify strict exited with $strictExit" }
          "STRICT_EXIT=$strictExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Parity
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'parity.json'
          $parityExit = $LASTEXITCODE
          if ($parityExit -ne 0) { throw "verify parity exited with $parityExit" }
          "PARITY_EXIT=$parityExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Collect Artifacts
        working-directory: ${{ github.workspace }}
        run: |
          $ErrorActionPreference = 'Stop'
          $artifactDir = Join-Path $PWD.Path 'artifacts'
          New-Item -ItemType Directory -Path $artifactDir -Force | Out-Null

          function Copy-Or-Placeholder {
            param(
              [string]$Source,
              [string]$Destination
            )

            if (-not [string]::IsNullOrWhiteSpace($Source) -and (Test-Path -Path $Source)) {
              Copy-Item -Path $Source -Destination $Destination -Force
            } else {
              New-Item -ItemType File -Path $Destination -Force | Out-Null
            }
          }

          Copy-Or-Placeholder -Source $env:EVENTS_PATH -Destination (Join-Path $artifactDir 'events.csv')
          Copy-Or-Placeholder -Source $env:TRADES_PATH -Destination (Join-Path $artifactDir 'trades.csv')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'strict.json') -Destination (Join-Path $artifactDir 'strict.json')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'parity.json') -Destination (Join-Path $artifactDir 'parity.json')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'demo-ctrader.log') -Destination (Join-Path $artifactDir 'demo-ctrader.log')
          Copy-Or-Placeholder -Source (Join-Path $PWD.Path 'preflight.sanity.txt') -Destination (Join-Path $artifactDir 'preflight.sanity.txt')

      - name: Summarize Results
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          $ErrorActionPreference = 'Stop'

          function Resolve-Value {
            param([string]$Value)
            if ([string]::IsNullOrWhiteSpace($Value)) {
              return 'unknown'
            }
            return $Value
          }

          function Resolve-Hash {
            param([string]$Path)
            if (-not [string]::IsNullOrWhiteSpace($Path) -and (Test-Path -Path $Path)) {
              return (Get-FileHash -Algorithm SHA256 -Path $Path).Hash.ToUpperInvariant()
            }
            return 'unknown'
          }

          $strictExit = Resolve-Value $env:STRICT_EXIT
          $parityExit = Resolve-Value $env:PARITY_EXIT
          $brokerDangling = Resolve-Value $env:BROKER_DANGLING
          $eventsHash = Resolve-Hash $env:EVENTS_PATH
          $tradesHash = Resolve-Hash $env:TRADES_PATH

          $resultLine = "STRICT_EXIT=$strictExit; PARITY_EXIT=$parityExit; broker_dangling=$brokerDangling; events_sha=$eventsHash; trades_sha=$tradesHash"
          Write-Host $resultLine
          $resultLine | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-live-smoke-ctrader-${{ env.RUN_ID }}
          path: ${{ github.workspace }}/artifacts

concurrency:
  group: demo-live-smoke-ctrader
  cancel-in-progress: false

