name: dataqa-tolerance

on:
  push:
    branches: [ main, feat/**, fix/** ]
  pull_request:
    branches: [ main, feat/**, fix/** ]
  workflow_dispatch:

jobs:
  dataqa:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build (Release)
        run: |
          set -euo pipefail
          mkdir -p scratch
          set +e
          dotnet build TiYf.Engine.sln -c Release --nologo | tee scratch/build.out
          BUILD_EXIT=$?
          set -e
          echo "$BUILD_EXIT" > scratch/build_exit.txt

      - name: Prepare scratch roots
        run: |
          set -euo pipefail
          mkdir -p scratch/K1-PASS scratch/K1-OVERFLOW journals/K1-PASS journals/K1-OVERFLOW

      - name: K1 PASS – configure & run
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          RUN_ROOT="$ROOT/scratch/K1-PASS"
          SIM="src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          BASE_CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          CFG_OUT="$RUN_ROOT/config.k1.pass.json"
          mkdir -p "$RUN_ROOT"

          set +e
          BASE_CFG="$BASE_CFG" CFG_OUT="$CFG_OUT" RUN_ROOT="$RUN_ROOT" K_MODE=pass DQ_EXTRA_MISSING=0 node .github/scripts/dataqa-rewrite.js
          CFG_EXIT=$?
          set -e
          echo "$CFG_EXIT" > "$RUN_ROOT/config_exit.txt"

          set +e
          dotnet exec "$SIM" --config "$CFG_OUT" --run-id K1-PASS | tee "$RUN_ROOT/sim.out"
          SIM_EXIT=$?
          set -e
          echo "$SIM_EXIT" > "$RUN_ROOT/sim_exit.txt"

          EV_PATH=$(sed -n 's/^JOURNAL_DIR_EVENTS=//p' "$RUN_ROOT/sim.out" | head -1)
          TR_PATH=$(sed -n 's/^JOURNAL_DIR_TRADES=//p' "$RUN_ROOT/sim.out" | head -1)
          echo "$EV_PATH" > "$RUN_ROOT/events_path.txt"
          echo "$TR_PATH" > "$RUN_ROOT/trades_path.txt"
          if [[ -n "$EV_PATH" ]]; then
            dirname "$EV_PATH" > "$RUN_ROOT/run_dir.txt"
          else
            echo "" > "$RUN_ROOT/run_dir.txt"
          fi
          GAPS=0
          if [[ -n "$EV_PATH" && -f "$EV_PATH" ]]; then
            GAPS=$(grep -c 'MARKET_DATA_GAP' "$EV_PATH" || true)
          fi
          ABORT_LINE=$(grep -m1 '^ABORTED=' "$RUN_ROOT/sim.out" || true)
          ABORT_BOOL=false
          if [[ -n "$ABORT_LINE" ]]; then
            VAL=$(echo "${ABORT_LINE#*=}" | tr '[:upper:]' '[:lower:]')
            if [[ "$VAL" == "1" || "$VAL" == "true" ]]; then
              ABORT_BOOL=true
            fi
          fi
          PASSED_BOOL=false
          if [[ "$SIM_EXIT" == "0" ]]; then
            PASSED_BOOL=true
          fi
          echo "$PASSED_BOOL" > "$RUN_ROOT/passed.txt"
          echo "$ABORT_BOOL" > "$RUN_ROOT/aborted.txt"
          echo "$GAPS" > "$RUN_ROOT/gaps.txt"
          PASSED_ENV=$(if [[ "$PASSED_BOOL" == "true" ]]; then echo "true"; else echo "false"; fi)
          ABORT_ENV=$(if [[ "$ABORT_BOOL" == "true" ]]; then echo "true"; else echo "false"; fi)
          GAPS_ENV="$GAPS"
          printf '{\n  "mode": "%s",\n  "passed": %s,\n  "aborted": %s,\n  "gaps": %s\n}\n' "K1-PASS" "$PASSED_ENV" "$ABORT_ENV" "${GAPS_ENV:-0}" > "$RUN_ROOT/verdict.json"

      - name: K1 OVERFLOW – configure & run
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          RUN_ROOT="$ROOT/scratch/K1-OVERFLOW"
          SIM="src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          BASE_CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          CFG_OUT="$RUN_ROOT/config.k1.over.json"
          mkdir -p "$RUN_ROOT"

          set +e
          BASE_CFG="$BASE_CFG" CFG_OUT="$CFG_OUT" RUN_ROOT="$RUN_ROOT" K_MODE=overflow DQ_EXTRA_MISSING=5 node .github/scripts/dataqa-rewrite.js
          CFG_EXIT=$?
          set -e
          echo "$CFG_EXIT" > "$RUN_ROOT/config_exit.txt"

          set +e
          dotnet exec "$SIM" --config "$CFG_OUT" --run-id K1-OVERFLOW | tee "$RUN_ROOT/sim.out"
          SIM_EXIT=$?
          set -e
          echo "$SIM_EXIT" > "$RUN_ROOT/sim_exit.txt"

          EV_PATH=$(sed -n 's/^JOURNAL_DIR_EVENTS=//p' "$RUN_ROOT/sim.out" | head -1)
          TR_PATH=$(sed -n 's/^JOURNAL_DIR_TRADES=//p' "$RUN_ROOT/sim.out" | head -1)
          echo "$EV_PATH" > "$RUN_ROOT/events_path.txt"
          echo "$TR_PATH" > "$RUN_ROOT/trades_path.txt"
          if [[ -n "$EV_PATH" ]]; then
            dirname "$EV_PATH" > "$RUN_ROOT/run_dir.txt"
          else
            echo "" > "$RUN_ROOT/run_dir.txt"
          fi
          GAPS=0
          if [[ -n "$EV_PATH" && -f "$EV_PATH" ]]; then
            GAPS=$(grep -c 'MARKET_DATA_GAP' "$EV_PATH" || true)
          fi
          ABORT_LINE=$(grep -m1 '^ABORTED=' "$RUN_ROOT/sim.out" || true)
          ABORT_BOOL=false
          if [[ -n "$ABORT_LINE" ]]; then
            VAL=$(echo "${ABORT_LINE#*=}" | tr '[:upper:]' '[:lower:]')
            if [[ "$VAL" == "1" || "$VAL" == "true" ]]; then
              ABORT_BOOL=true
            fi
          fi
          PASSED_BOOL=false
          if [[ "$SIM_EXIT" == "0" ]]; then
            PASSED_BOOL=true
          fi
          echo "$CFG_EXIT" > "$RUN_ROOT/config_exit.txt"
          echo "$SIM_EXIT" > "$RUN_ROOT/sim_exit.txt"
          echo "$PASSED_BOOL" > "$RUN_ROOT/passed.txt"
          echo "$ABORT_BOOL" > "$RUN_ROOT/aborted.txt"
          echo "$GAPS" > "$RUN_ROOT/gaps.txt"
          PASSED_ENV=$(if [[ "$PASSED_BOOL" == "true" ]]; then echo "true"; else echo "false"; fi)
          ABORT_ENV=$(if [[ "$ABORT_BOOL" == "true" ]]; then echo "true"; else echo "false"; fi)
          GAPS_ENV="$GAPS"
          printf '{\n  "mode": "%s",\n  "passed": %s,\n  "aborted": %s,\n  "gaps": %s\n}\n' "K1-OVERFLOW" "$PASSED_ENV" "$ABORT_ENV" "${GAPS_ENV:-0}" > "$RUN_ROOT/verdict.json"

      - name: Compose summary CSV
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          SUMMARY="$ROOT/scratch/dataqa-summary.csv"
          printf "mode,passed,aborted,gaps\n" > "$SUMMARY"
          for MODE in K1-PASS K1-OVERFLOW; do
            RUN_ROOT="$ROOT/scratch/$MODE"
            PASSED=$(cat "$RUN_ROOT/passed.txt" 2>/dev/null || echo "")
            ABORTED=$(cat "$RUN_ROOT/aborted.txt" 2>/dev/null || echo "")
            GAPS=$(cat "$RUN_ROOT/gaps.txt" 2>/dev/null || echo "")
            printf "%s,%s,%s,%s\n" "$MODE" "$PASSED" "$ABORTED" "$GAPS" >> "$SUMMARY"
          done

      - name: Collect diagnostics
        if: always()
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          mkdir -p artifacts/dataqa
          for MODE in K1-PASS K1-OVERFLOW; do
            RUN_ROOT="$ROOT/scratch/$MODE"
            DEST_DIR="journals/$MODE"
            mkdir -p "$DEST_DIR"
            RUN_DIR_RAW=$(cat "$RUN_ROOT/run_dir.txt" 2>/dev/null || echo "")
            rm -rf -- "${DEST_DIR:?}/"* || true
            DEST_ABS=$(cd "$DEST_DIR" && pwd)
            RUN_DIR_POSIX="${RUN_DIR_RAW//\\//}"
            if [[ -n "$RUN_DIR_POSIX" && -d "$RUN_DIR_POSIX" ]]; then
              if RUN_ABS=$(cd "$RUN_DIR_POSIX" && pwd); then
                if [[ "$DEST_ABS" != "$RUN_ABS" ]]; then
                  cp -R "$RUN_DIR_POSIX/." "$DEST_DIR/"
                fi
              else
                cp -R "$RUN_DIR_POSIX/." "$DEST_DIR/"
              fi
            fi
            touch "$DEST_DIR/.keep"
            for FILE in config_exit.txt sim_exit.txt events_path.txt trades_path.txt run_dir.txt verdict.json passed.txt aborted.txt gaps.txt sim.out; do
              cp "$RUN_ROOT/$FILE" "artifacts/dataqa/${MODE}_$FILE" || true
            done
          done
          cp scratch/build.out artifacts/dataqa/build.out || true
          cp scratch/build_exit.txt artifacts/dataqa/build_exit.txt || true
          cp scratch/dataqa-summary.csv artifacts/dataqa/dataqa-summary.csv || true

      - name: Invariants (final gate)
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          BUILD_EXIT=$(cat scratch/build_exit.txt 2>/dev/null || echo 1)
          if [[ "$BUILD_EXIT" != "0" ]]; then
            echo "dotnet build exited with $BUILD_EXIT" >&2
            exit 2
          fi
          for MODE in K1-PASS K1-OVERFLOW; do
            RUN_ROOT="$ROOT/scratch/$MODE"
            CFG_EXIT=$(cat "$RUN_ROOT/config_exit.txt" 2>/dev/null || echo 1)
            if [[ "$CFG_EXIT" != "0" ]]; then
              echo "$MODE config rewrite failed (exit $CFG_EXIT)" >&2
              exit 2
            fi
          done
          PASS_SIM_EXIT=$(cat scratch/K1-PASS/sim_exit.txt 2>/dev/null || echo 1)
          OVER_SIM_EXIT=$(cat scratch/K1-OVERFLOW/sim_exit.txt 2>/dev/null || echo 1)
          PASS_ABORTED=$(cat scratch/K1-PASS/aborted.txt 2>/dev/null || echo "")
          OVER_ABORTED=$(cat scratch/K1-OVERFLOW/aborted.txt 2>/dev/null || echo "")
          if [[ "$PASS_SIM_EXIT" != "0" ]]; then
            echo "K1-PASS sim exited with $PASS_SIM_EXIT" >&2
            exit 2
          fi
          if [[ "$PASS_ABORTED" != "false" ]]; then
            echo "Expected K1-PASS run to avoid abort (found $PASS_ABORTED)" >&2
            exit 2
          fi
          if [[ "$OVER_ABORTED" != "true" ]]; then
            echo "Expected K1-OVERFLOW run to abort (found $OVER_ABORTED)" >&2
            exit 2
          fi
          echo "dataqa invariants satisfied"

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dataqa-tolerance-${{ matrix.os }}
          path: |
            scratch/build.out
            scratch/build_exit.txt
            scratch/dataqa-summary.csv
            scratch/K1-PASS/**
            scratch/K1-OVERFLOW/**
            journals/K1-PASS/**
            journals/K1-OVERFLOW/**
          if-no-files-found: warn
          retention-days: 7
