name: dataqa-tolerance

on:
  workflow_dispatch:
  push:
    branches: [ main, feat/**, fix/** ]

jobs:
  dataqa:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build (Release)
        run: dotnet build TiYf.Engine.sln -c Release --nologo

      - name: Prepare temp roots
        id: prep
        run: |
          set -euo pipefail
          PASS_ROOT="${RUNNER_TEMP}/k1_pass"
          OVER_ROOT="${RUNNER_TEMP}/k1_over"
          mkdir -p "$PASS_ROOT" "$OVER_ROOT"
          echo "PASS_ROOT=$PASS_ROOT" >> "$GITHUB_ENV"
          echo "OVER_ROOT=$OVER_ROOT" >> "$GITHUB_ENV"
          echo "pass_root=$PASS_ROOT" >> "$GITHUB_OUTPUT"
          echo "over_root=$OVER_ROOT" >> "$GITHUB_OUTPUT"

      - name: K=1 PASS – rewrite config & run sim
        run: |
          set -euo pipefail
          SIM="src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          BASE_CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          CFG_OUT="${PASS_ROOT}/config.k1.pass.json"

          BASE_CFG="$BASE_CFG" CFG_OUT="$CFG_OUT" PASS_ROOT="$PASS_ROOT" node -e '
            const fs=require("fs"), p=require("path");
            const inPath=process.env.BASE_CFG, outPath=process.env.CFG_OUT, root=process.env.PASS_ROOT;
            const cfg=JSON.parse(fs.readFileSync(inPath,"utf8"));
            cfg.output ||= {}; cfg.output.journalDir = p.resolve(root,"journals");
            cfg.featureFlags ||= {}; cfg.featureFlags.dataQa = "active";
            cfg.dataQaConfig ||= {}; cfg.dataQaConfig.maxMissingBarsPerInstrument = 1;
            const ticks = cfg?.data?.ticks || {};
            const outTicks = {};
            fs.mkdirSync(p.resolve(root,"ticks"), {recursive:true});
            for(const [sym, src] of Object.entries(ticks)){
              const abs = p.resolve(src);
              const lines = fs.readFileSync(abs,"utf8").split(/\r?\n/);
              const header = lines[0] ?? "";
              const data = lines.slice(1).filter(l => l.trim().length>0);
              const after = data.slice(1);
              const dst = p.resolve(root,"ticks",`ticks_${sym}.csv`);
              fs.writeFileSync(dst, [header,...after].join("\n")+"\n", "utf8");
              outTicks[sym] = dst;
            }
            cfg.data ||= {}; cfg.data.ticks = outTicks;
            fs.writeFileSync(outPath, JSON.stringify(cfg,null,2), "utf8");
            console.log("CFG_OUT:", outPath);
          '

          dotnet exec "$SIM" --config "$CFG_OUT" --run-id K1-PASS
          # Normalize journal directory name for artifact expectations
          if [ -d "${PASS_ROOT}/journals" ]; then
            for d in "${PASS_ROOT}/journals"/*; do
              if [ -d "$d" ] && [ "${d}" != "${PASS_ROOT}/journals/K1-PASS" ]; then
                rm -rf "${PASS_ROOT}/journals/K1-PASS"
                mv "$d" "${PASS_ROOT}/journals/K1-PASS"
                break
              fi
            done
          fi

      - name: K=1 OVERFLOW – rewrite config & run sim
        run: |
          set -euo pipefail
          SIM="src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          BASE_CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          CFG_OUT="${OVER_ROOT}/config.k1.over.json"

          BASE_CFG="$BASE_CFG" CFG_OUT="$CFG_OUT" OVER_ROOT="$OVER_ROOT" node -e '
            const fs=require("fs"), p=require("path");
            const inPath=process.env.BASE_CFG, outPath=process.env.CFG_OUT, root=process.env.OVER_ROOT;
            const cfg=JSON.parse(fs.readFileSync(inPath,"utf8"));
            cfg.output ||= {}; cfg.output.journalDir = p.resolve(root,"journals");
            cfg.featureFlags ||= {}; cfg.featureFlags.dataQa = "active";
            cfg.dataQaConfig ||= {}; cfg.dataQaConfig.maxMissingBarsPerInstrument = 1;
            const ticks = cfg?.data?.ticks || {};
            const outTicks = {};
            fs.mkdirSync(p.resolve(root,"ticks"), {recursive:true});
            for(const [sym, src] of Object.entries(ticks)){
              const abs = p.resolve(src);
              const lines = fs.readFileSync(abs,"utf8").split(/\r?\n/);
              const header = lines[0] ?? "";
              const data = lines.slice(1).filter(l => l.trim().length>0);
              const after = data.slice(2);
              const dst = p.resolve(root,"ticks",`ticks_${sym}.csv`);
              fs.writeFileSync(dst, [header,...after].join("\n")+"\n", "utf8");
              outTicks[sym] = dst;
            }
            cfg.data ||= {}; cfg.data.ticks = outTicks;
            fs.writeFileSync(outPath, JSON.stringify(cfg,null,2), "utf8");
            console.log("CFG_OUT:", outPath);
          '

          dotnet exec "$SIM" --config "$CFG_OUT" --run-id K1-OVERFLOW
          if [ -d "${OVER_ROOT}/journals" ]; then
            for d in "${OVER_ROOT}/journals"/*; do
              if [ -d "$d" ] && [ "${d}" != "${OVER_ROOT}/journals/K1-OVERFLOW" ]; then
                rm -rf "${OVER_ROOT}/journals/K1-OVERFLOW"
                mv "$d" "${OVER_ROOT}/journals/K1-OVERFLOW"
                break
              fi
            done
          fi

      - name: Summaries (quick asserts)
        run: |
          set -euo pipefail
          echo "PASS_ROOT=$PASS_ROOT"
          echo "OVER_ROOT=$OVER_ROOT"
          echo "::group::Tree PASS_ROOT"
          ls -la "$PASS_ROOT" || true
          ls -la "$PASS_ROOT/journals" || true
          ls -la "$PASS_ROOT/journals/K1-PASS" || true
          echo "::endgroup::"
          echo "::group::Tree OVER_ROOT"
          ls -la "$OVER_ROOT" || true
          ls -la "$OVER_ROOT/journals" || true
          ls -la "$OVER_ROOT/journals/K1-OVERFLOW" || true
          echo "::endgroup::"

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dataqa-tolerance-${{ matrix.os }}
          path: |
            ${{ steps.prep.outputs.pass_root }}/**
            ${{ steps.prep.outputs.over_root }}/**
          if-no-files-found: warn
          retention-days: 7
