name: m0-determinism

on:
  push:
    branches: [ main, feat/**, fix/** ]
  pull_request:
    branches: [ main, feat/**, fix/** ]
  workflow_dispatch:

jobs:
  determinism:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build (Release)
        run: dotnet build -c Release

      - name: Run M0 (A)
        run: |
          set -euo pipefail
          SIM="src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          OUT=$(dotnet exec "$SIM" --config "$CFG" --run-id M0-RUN-A | tee sim_A.out)
          echo "$OUT" | sed -n 's/^JOURNAL_DIR_EVENTS=//p' | head -1 > ev_A.txt
          echo "$OUT" | sed -n 's/^JOURNAL_DIR_TRADES=//p' | head -1 > tr_A.txt

      - name: Run M0 (B)
        run: |
          set -euo pipefail
          SIM="src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          OUT=$(dotnet exec "$SIM" --config "$CFG" --run-id M0-RUN-B | tee sim_B.out)
          echo "$OUT" | sed -n 's/^JOURNAL_DIR_EVENTS=//p' | head -1 > ev_B.txt
          echo "$OUT" | sed -n 's/^JOURNAL_DIR_TRADES=//p' | head -1 > tr_B.txt

      - name: Parity check (events + trades)
        run: |
          set -euo pipefail
          TOOLS="src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll"
          EV_A=$(cat ev_A.txt); EV_B=$(cat ev_B.txt)
          TR_A=$(cat tr_A.txt); TR_B=$(cat tr_B.txt)
          set +e
          dotnet exec "$TOOLS" verify parity \
            --events-a "$EV_A" --events-b "$EV_B" \
            --trades-a "$TR_A" --trades-b "$TR_B" \
            --json | tee parity.json
          PARITY_EXIT=$?
          set -e
          echo "$PARITY_EXIT" > parity_exit.txt

      - name: Invariants (final gate)
        run: |
          set -euo pipefail
          PARITY_EXIT=$(cat parity_exit.txt || echo 1)
          if [[ "$PARITY_EXIT" != "0" ]]; then
            echo "Parity mismatch (see parity.json)"; exit 2
          fi
          EV_A=$(cat ev_A.txt); TR_A=$(cat tr_A.txt)
          ALERTS=$(grep -c '^ALERT_BLOCK_' "$EV_A" || true)
          TR_ROWS=$(tail -n +2 "$TR_A" | wc -l | awk '{print $1}')
          if [[ "$ALERTS" != "0" ]]; then echo "Alerts found=$ALERTS"; exit 2; fi
          if [[ "$TR_ROWS" != "6" ]]; then echo "Unexpected trades rows=$TR_ROWS"; exit 2; fi
          echo " Determinism OK (no alerts, 6 trades, parity match)."

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: m0-parity
          path: |
            sim_A.out
            sim_B.out
            ev_A.txt
            ev_B.txt
            tr_A.txt
            tr_B.txt
            parity.json
            parity_exit.txt
            journals/M0/M0-RUN-A/**
            journals/M0/M0-RUN-B/**