name: M0 Determinism

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  m0-determinism:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore & Build
        run: |
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release -warnaserror

      - name: Run Tests (Engine)
        run: dotnet test tests/TiYf.Engine.Tests -c Release --logger "trx;LogFileName=tests.trx"

      - name: Run Tests (Tools)
        run: dotnet test tests/TiYf.Engine.Tools.Tests -c Release --logger "trx;LogFileName=tests-tools.trx"

      - name: Prepare artifact dirs
        run: |
          Remove-Item -Recurse -Force artifacts -ErrorAction SilentlyContinue
          New-Item -Force -ItemType Directory -Path artifacts/raw | Out-Null
          New-Item -Force -ItemType Directory -Path artifacts/canonical | Out-Null
          New-Item -Force -ItemType Directory -Path artifacts/hashes | Out-Null

      - name: Run M0 — A
        run: |
          # Clean any prior A run dir and execute with explicit run-id to avoid meta/run-id interference
          if (Test-Path journals/M0/M0-RUN-A) { Remove-Item -Recurse -Force journals/M0/M0-RUN-A }
          dotnet run --project src/TiYf.Engine.Sim -- --config tests/fixtures/backtest_m0/config.backtest-m0.json --run-id A
          Copy-Item journals/M0/M0-RUN-A/events.csv artifacts/raw/events_A.csv
          Copy-Item journals/M0/M0-RUN-A/trades.csv artifacts/raw/trades_A.csv

      - name: Run M0 — B
        run: |
          # Clean any prior B run dir and execute with explicit run-id to avoid meta/run-id interference
          if (Test-Path journals/M0/M0-RUN-B) { Remove-Item -Recurse -Force journals/M0/M0-RUN-B }
          dotnet run --project src/TiYf.Engine.Sim -- --config tests/fixtures/backtest_m0/config.backtest-m0.json --run-id B
          Copy-Item journals/M0/M0-RUN-B/events.csv artifacts/raw/events_B.csv
          Copy-Item journals/M0/M0-RUN-B/trades.csv artifacts/raw/trades_B.csv

      - name: Verify parity (events + trades)
        id: parity
        run: |
          # Use Tools CLI verify parity for normalized hashing and first-diff diagnostics
          $tools = 'src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll'
          $parityJson = & dotnet exec $tools verify parity --events-a 'artifacts/raw/events_A.csv' --events-b 'artifacts/raw/events_B.csv' --trades-a 'artifacts/raw/trades_A.csv' --trades-b 'artifacts/raw/trades_B.csv' --json
          $parityExit = $LASTEXITCODE
          if ($null -ne $parityJson) { $parityJson | Set-Content -Path artifacts/hashes/parity.json -Encoding UTF8 }
          "parity_exit=$parityExit" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

          # Extract invariants from raw files (meta line and counts)
          $eventsMetaLine = (Get-Content artifacts/raw/events_A.csv -First 1)
          $dataVersion = if ($eventsMetaLine -match 'data_version=([A-Fa-f0-9]{64})') { $Matches[1].ToUpper() } else { '' }
          $alertCount = (Select-String -Path artifacts/raw/events_A.csv -Pattern 'ALERT_BLOCK_' -SimpleMatch | Measure-Object).Count
          $tradesLines = Get-Content artifacts/raw/trades_A.csv
          $tradesRowCount = ($tradesLines.Length - 1)

          $manifest = [ordered]@{
            parity_exit = $parityExit;
            data_version = $dataVersion; alert_block_count = $alertCount; trades_rows = $tradesRowCount
          } | ConvertTo-Json -Depth 3
          $manifest | Set-Content -Path artifacts/hashes/manifest.json -Encoding UTF8

          "data_version=$dataVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "trades_rows=$tradesRowCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "alert_count=$alertCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Assert Determinism & Invariants
        run: |
          $EXPECTED_DV = 'C531EDAA1B2B3EB9286B3EDA98B6443DD365C1A8DFEA2AFB4B77FC7DDD1D6122'
          $parityExit = [int]'${{ steps.parity.outputs.parity_exit }}'
          $dv  = '${{ steps.parity.outputs.data_version }}'
          $rows = [int]'${{ steps.parity.outputs.trades_rows }}'
          $alerts = [int]'${{ steps.parity.outputs.alert_count }}'

          Write-Host "parity_exit=$parityExit"
          Write-Host "data_version=$dv"; Write-Host "trades_rows=$rows"; Write-Host "alert_block_count=$alerts"

          $fail = $false
          if ($parityExit -ne 0) { Write-Error 'Verify parity mismatch'; $fail = $true }
          if ($dv -ne $EXPECTED_DV) { Write-Error "Unexpected data_version: $dv"; $fail = $true }
          if ($alerts -ne 0) { Write-Error "ALERT_BLOCK_* count not zero: $alerts"; $fail = $true }
          if ($rows -ne 6) { Write-Error "Trades row count not 6: $rows"; $fail = $true }

          if ($fail) {
            # Parity tool already prints FIRST_DIFF; also persist raw files for inspection
            Copy-Item artifacts/raw/events_A.csv artifacts/hashes/events_A.snapshot.csv -Force
            Copy-Item artifacts/raw/events_B.csv artifacts/hashes/events_B.snapshot.csv -Force
            Copy-Item artifacts/raw/trades_A.csv artifacts/hashes/trades_A.snapshot.csv -Force
            Copy-Item artifacts/raw/trades_B.csv artifacts/hashes/trades_B.snapshot.csv -Force
            Write-Error 'Determinism/Invariant check failed.'
            exit 1
          }

      - name: Job Summary
        if: always()
        run: |
          try {
            $parity = Get-Content artifacts/hashes/parity.json -ErrorAction Stop | ConvertFrom-Json
            $ok = ($parity.exitCode -eq 0)
            $status = if ($ok) { '✅ OK' } else { '⚠️ Drift' }
            $evA = $parity.events.hashA.Substring(0,8)
            $evB = $parity.events.hashB.Substring(0,8)
            $trA = if ($parity.trades) { $parity.trades.hashA.Substring(0,8) } else { '--------' }
            $trB = if ($parity.trades) { $parity.trades.hashB.Substring(0,8) } else { '--------' }
            $dv = '${{ steps.parity.outputs.data_version }}'
            $rows = '${{ steps.parity.outputs.trades_rows }}'
            $alerts = '${{ steps.parity.outputs.alert_count }}'
            $summary = @()
            $summary += "# M0 Determinism"
            $summary += "Status: **$status**"
            $summary += ""
            $summary += "- Events A/B: `$evA` / `$evB`"
            $summary += "- Trades A/B: `$trA` / `$trB`"
            $summary += "- Data Version: `$dv`"
            $summary += "- Trades rows: `$rows` | Alerts: `$alerts`"
            $summaryText = $summary -join "`n"
            $summaryText | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          } catch {
            "M0 Determinism summary unavailable" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }

      - name: Upload artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: m0-determinism-artifacts
          path: |
            artifacts/raw/**
            artifacts/canonical/**
            artifacts/hashes/**