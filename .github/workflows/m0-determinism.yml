name: M0 Determinism

on:
  workflow_dispatch:
  pull_request:
    branches: [ main, feat/**, fix/** ]
  push:
    branches: [ main ]

jobs:
  m0-determinism:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build (Release)
        run: dotnet build TiYf.Engine.sln -c Release --nologo

      - name: Clean journals
        shell: bash
        run: rm -rf journals || true

      - name: Run A (capture stdout)
        id: run_a
        shell: bash
        run: |
          set -euo pipefail
          LOG=run-A.log
          dotnet exec src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll \
            --config tests/fixtures/backtest_m0/config.backtest-m0.json \
            --run-id A --quiet | tee "$LOG"
          ev=$(awk -F= '/^JOURNAL_DIR_EVENTS=/{print $2}' "$LOG" | tail -n1)
          tr=$(awk -F= '/^JOURNAL_DIR_TRADES=/{print $2}' "$LOG" | tail -n1)
          if [ -z "$ev" ] || [ ! -d "$ev" ]; then
            echo "Failed to resolve events directory for run A" >&2
            exit 1
          fi
          if [ -z "$tr" ] || [ ! -d "$tr" ]; then
            echo "Failed to resolve trades directory for run A" >&2
            exit 1
          fi
          echo "EV_A=$ev" >> "$GITHUB_OUTPUT"
          echo "TR_A=$tr" >> "$GITHUB_OUTPUT"

      - name: Run B (capture stdout)
        id: run_b
        shell: bash
        run: |
          set -euo pipefail
          LOG=run-B.log
          dotnet exec src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll \
            --config tests/fixtures/backtest_m0/config.backtest-m0.json \
            --run-id B --quiet | tee "$LOG"
          ev=$(awk -F= '/^JOURNAL_DIR_EVENTS=/{print $2}' "$LOG" | tail -n1)
          tr=$(awk -F= '/^JOURNAL_DIR_TRADES=/{print $2}' "$LOG" | tail -n1)
          if [ -z "$ev" ] || [ ! -d "$ev" ]; then
            echo "Failed to resolve events directory for run B" >&2
            exit 1
          fi
          if [ -z "$tr" ] || [ ! -d "$tr" ]; then
            echo "Failed to resolve trades directory for run B" >&2
            exit 1
          fi
          echo "EV_B=$ev" >> "$GITHUB_OUTPUT"
          echo "TR_B=$tr" >> "$GITHUB_OUTPUT"

      - name: Verify parity (events + trades)
        shell: bash
        run: |
          set -euo pipefail
          tools="src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll"
          set +e
          dotnet exec "$tools" verify parity \
            --events-a "${{ steps.run_a.outputs.EV_A }}/events.csv" \
            --events-b "${{ steps.run_b.outputs.EV_B }}/events.csv" \
            --trades-a "${{ steps.run_a.outputs.TR_A }}/trades.csv" \
            --trades-b "${{ steps.run_b.outputs.TR_B }}/trades.csv" \
            --json | tee parity.json
          code=$?
          set -e
          echo "PARITY_EXIT=$code" >> "$GITHUB_ENV"

      - name: Upload parity JSON (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: m0-parity
          path: parity.json

      - name: Gate on parity == OK
        shell: bash
        run: |
          set -euo pipefail
          code=$(jq -r '.exit_code // .exitCode // 2' parity.json || echo 2)
          if [ "$code" != "0" ]; then
            echo "Parity drift. See parity.json and raw journals."
            exit 2
          fi