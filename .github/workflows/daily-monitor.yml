name: daily-monitor

on:
  schedule:
    - cron: '15 2 * * 1-5'
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

concurrency:
  group: daily-monitor-${{ github.ref }}
  cancel-in-progress: true

jobs:
  monitor-health:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    env:
      HEALTH_PATH: scratch/health.json
      RUNNER_LABELS: "self-hosted, Linux, X64, tiyf-vps"
    steps:
      - name: Install PowerShell 7
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          POWERSHELL_VERSION="7.4.6"
          INSTALL_ROOT="$HOME/powershell"

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
            exit 0
          fi

          if [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
            exit 0
          fi

          mkdir -p "$INSTALL_ROOT"
          curl -fSLo powershell.tar.gz "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz"
          curl -fSLo checksums.txt "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/SHA256SUMS"
          EXPECTED_SUM="$(grep "powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz" checksums.txt | awk '{print $1}')"
          if [ -z "$EXPECTED_SUM" ]; then
            echo "ERROR: Unable to locate expected checksum for PowerShell archive" >&2
            exit 1
          fi
          ACTUAL_SUM="$(sha256sum powershell.tar.gz | awk '{print $1}')"
          if [ "$EXPECTED_SUM" != "$ACTUAL_SUM" ]; then
            echo "ERROR: Checksum verification failed for powershell.tar.gz" >&2
            echo "Expected: $EXPECTED_SUM" >&2
            echo "Actual:   $ACTUAL_SUM" >&2
            exit 1
          fi
          tar -xzf powershell.tar.gz -C "$INSTALL_ROOT"
          rm powershell.tar.gz checksums.txt

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/pwsh"
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
          elif [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh"
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
          else
            echo "Failed to locate pwsh after extraction" >&2
            find "$INSTALL_ROOT" -maxdepth 3 -type f -name 'pwsh' -print || true
            exit 1
          fi

      - name: Prepare workspace
        run: |
          set -euo pipefail
          rm -rf scratch
          mkdir -p scratch

      - name: Report runner context
        shell: pwsh
        run: |
          Write-Host ("Runner name: {0}" -f $env:RUNNER_NAME)
          Write-Host ("Runner labels: {0}" -f $env:RUNNER_LABELS)

      - name: Fetch /health snapshot
        run: |
          set -euo pipefail
          attempts=0
          while [ $attempts -lt 5 ]; do
            if curl -fsS http://127.0.0.1:8080/health -o "$HEALTH_PATH"; then
              break
            fi
            attempts=$((attempts + 1))
            sleep 2
          done

          if [ ! -s "$HEALTH_PATH" ]; then
            echo "Failed to capture /health after $attempts attempts" >&2
            exit 1
          fi

      - name: Log disk usage
        run: |
          set -euo pipefail
          df -h

      - name: Validate health payload
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $path = $env:HEALTH_PATH
          if (-not (Test-Path -Path $path)) {
            throw "/health payload missing at $path"
          }

          $health = Get-Content -Raw -Path $path | ConvertFrom-Json
          if ($null -eq $health) {
            throw "Unable to parse JSON from $path"
          }
          $adapter = $health.adapter
          $connected = [bool]$health.connected
          $heartbeat = $health.last_heartbeat_utc
          $heartbeatAge = if ($health.PSObject.Properties.Name -contains 'heartbeat_age_seconds') { [double]$health.heartbeat_age_seconds } else { 0 }
          $barLag = if ($health.PSObject.Properties.Name -contains 'bar_lag_ms') { [double]$health.bar_lag_ms } else { 0 }
          $openPositions = if ($health.PSObject.Properties.Name -contains 'open_positions') { [int]$health.open_positions } else { 0 }
          $activeOrders = if ($health.PSObject.Properties.Name -contains 'active_orders') { [int]$health.active_orders } else { 0 }
          $riskEventsTotal = if ($health.PSObject.Properties.Name -contains 'risk_events_total') { [int64]$health.risk_events_total } else { 0 }
          $alertsTotal = if ($health.PSObject.Properties.Name -contains 'alerts_total') { [int64]$health.alerts_total } else { 0 }

          if (-not $connected) {
            throw "Expected connected=true but found connected=$connected"
          }

          "DAILY_MONITOR_ADAPTER=$adapter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_CONNECTED=$connected" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_HEARTBEAT=$heartbeat" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_HEARTBEAT_AGE=$heartbeatAge" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_BAR_LAG_MS=$barLag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_OPEN_POSITIONS=$openPositions" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_ACTIVE_ORDERS=$activeOrders" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_RISK_EVENTS_TOTAL=$riskEventsTotal" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DAILY_MONITOR_ALERTS_TOTAL=$alertsTotal" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload health artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-monitor-health
          path: |
            ${{ env.HEALTH_PATH }}

      - name: Summarize verdict
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $adapter = $env:DAILY_MONITOR_ADAPTER
          $connected = $env:DAILY_MONITOR_CONNECTED
          $heartbeat = $env:DAILY_MONITOR_HEARTBEAT
          $heartbeatAge = [double]::Parse(($env:DAILY_MONITOR_HEARTBEAT_AGE ?? '0'), [System.Globalization.CultureInfo]::InvariantCulture)
          $barLag = [double]::Parse(($env:DAILY_MONITOR_BAR_LAG_MS ?? '0'), [System.Globalization.CultureInfo]::InvariantCulture)
          $openPositions = $env:DAILY_MONITOR_OPEN_POSITIONS
          $activeOrders = $env:DAILY_MONITOR_ACTIVE_ORDERS
          $riskEvents = $env:DAILY_MONITOR_RISK_EVENTS_TOTAL
          $alertsTotal = $env:DAILY_MONITOR_ALERTS_TOTAL
          $heartbeatFormatted = ('{0:0.0}' -f $heartbeatAge)
          $barLagString = $barLag.ToString([System.Globalization.CultureInfo]::InvariantCulture)
          $line = "daily-monitor: adapter={0} connected={1} heartbeat_age={2}s bar_lag_ms={3} open_positions={4} active_orders={5} risk_events_total={6} alerts_total={7}" -f $adapter, $connected, $heartbeatFormatted, $barLagString, $openPositions, $activeOrders, $riskEvents, $alertsTotal
          Write-Host $line
          Set-Content -Path (Join-Path 'scratch' 'summary.txt') -Value $line -Encoding UTF8
          Add-Content -Encoding UTF8 -Path $env:GITHUB_STEP_SUMMARY -Value "## daily-monitor verdict"
          Add-Content -Encoding UTF8 -Path $env:GITHUB_STEP_SUMMARY -Value ""
          Add-Content -Encoding UTF8 -Path $env:GITHUB_STEP_SUMMARY -Value $line
