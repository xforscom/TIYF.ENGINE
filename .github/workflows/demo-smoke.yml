name: demo-smoke

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  demo-smoke:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      RUN_ID: DEMO-A
      CONFIG_PATH: tests/fixtures/backtest_m0/config.backtest-m0.json
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup .NET 8
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
        with:
          dotnet-version: '8.0.x'

      - name: Restore and build Release
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release --no-restore --nologo

      - name: Run unit tests
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet test TiYf.Engine.sln -c Release --no-build --logger "trx;LogFileName=demo-smoke.trx" --results-directory artifacts/test-results

      - name: Prepare directories and env snapshot
        run: |
          $ErrorActionPreference = 'Stop'
          foreach ($path in @('artifacts', 'scratch')) {
            if (Test-Path $path) { Remove-Item -Recurse -Force $path }
          }
          New-Item -ItemType Directory -Force -Path 'artifacts/demo-smoke' | Out-Null
          New-Item -ItemType Directory -Force -Path 'artifacts/env' | Out-Null
          New-Item -ItemType Directory -Force -Path 'scratch' | Out-Null
          $lines = @(
            "run_id=$env:RUN_ID",
            "config=$env:CONFIG_PATH",
            "github_sha=$env:GITHUB_SHA",
            "github_ref=$env:GITHUB_REF",
            "run_attempt=$env:GITHUB_RUN_ATTEMPT"
          )
          $lines | Set-Content -Encoding UTF8 'artifacts/env/env.sanity.txt'

      - name: Resolve binaries
        run: |
          $ErrorActionPreference = 'Stop'
          $sim = Join-Path $PWD 'src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll'
          $tools = Join-Path $PWD 'src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll'
          if (-not (Test-Path $sim)) { throw "Simulator binary not found at $sim" }
          if (-not (Test-Path $tools)) { throw "Tools binary not found at $tools" }
          "SIM_DLL=$sim" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TOOLS_DLL=$tools" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Run simulator (demo smoke)
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'scratch/sim.log'
          dotnet exec $env:SIM_DLL --config $env:CONFIG_PATH --run-id $env:RUN_ID | Tee-Object -FilePath $logPath
          $simExit = $LASTEXITCODE
          $simExit | Set-Content -Encoding UTF8 'scratch/sim.exit'
          if ($simExit -ne 0) { throw "Simulator exited with $simExit" }
          $eventsLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_EVENTS='
          $tradesLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_TRADES='
          if (-not $eventsLine) { throw 'Missing JOURNAL_DIR_EVENTS in simulator output' }
          if (-not $tradesLine) { throw 'Missing JOURNAL_DIR_TRADES in simulator output' }
          $eventsPath = ($eventsLine | Select-Object -First 1).Line.Split('=')[1]
          $tradesPath = ($tradesLine | Select-Object -First 1).Line.Split('=')[1]
          $eventsFull = [System.IO.Path]::GetFullPath($eventsPath)
          $tradesFull = [System.IO.Path]::GetFullPath($tradesPath)
          $eventsFull | Set-Content -Encoding UTF8 'scratch/events.path'
          $tradesFull | Set-Content -Encoding UTF8 'scratch/trades.path'
          'SIM_EXIT={0}' -f $simExit | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          'EVENTS_PATH={0}' -f $eventsFull | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          'TRADES_PATH={0}' -f $tradesFull | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "sim_exit=$simExit"
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "events_path=$eventsFull"
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "trades_path=$tradesFull"

      - name: Verify strict (schema 1.3.0)
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec $env:TOOLS_DLL verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'artifacts/demo-smoke/strict.json'
          $strictExit = $LASTEXITCODE
          $strictExit | Set-Content -Encoding UTF8 'scratch/strict.exit'
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "strict_exit=$strictExit"
          if ($strictExit -ne 0) { throw "verify strict exited with $strictExit" }

      - name: Verify parity self-check
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec $env:TOOLS_DLL verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'artifacts/demo-smoke/parity.json'
          $parityExit = $LASTEXITCODE
          $parityExit | Set-Content -Encoding UTF8 'scratch/parity.exit'
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "parity_exit=$parityExit"
          if ($parityExit -ne 0) { throw "verify parity exited with $parityExit" }

      - name: Collect metrics and summary
        run: |
          $ErrorActionPreference = 'Stop'
          $eventsFull = Get-Content 'scratch/events.path'
          $tradesFull = Get-Content 'scratch/trades.path'
          Copy-Item -Path $eventsFull -Destination 'artifacts/demo-smoke/events.csv' -Force
          Copy-Item -Path $tradesFull -Destination 'artifacts/demo-smoke/trades.csv' -Force
          Copy-Item -Path 'scratch/sim.log' -Destination 'artifacts/demo-smoke/sim.log' -Force
          $alertMatches = Select-String -Path $eventsFull -Pattern '^ALERT_BLOCK_'
          $alertCount = if ($alertMatches) { $alertMatches.Count } else { 0 }
          $tradeRows = (Get-Content $tradesFull | Select-Object -Skip 1).Count
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "alert_block_count=$alertCount"
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "trades_row_count=$tradeRows"
          $strictExit = [int](Get-Content 'scratch/strict.exit')
          $parityExit = [int](Get-Content 'scratch/parity.exit')
          $simExit = [int](Get-Content 'scratch/sim.exit')
          if ($tradeRows -ne 6) { throw "Unexpected trades row count: $tradeRows" }
          if ($alertCount -ne 0) { throw "Alert blocks present: $alertCount" }
          if ($simExit -ne 0) { throw "Simulator exit was $simExit" }
          if ($strictExit -ne 0) { throw "Strict exit was $strictExit" }
          if ($parityExit -ne 0) { throw "Parity exit was $parityExit" }
          $parityJson = Get-Content 'artifacts/demo-smoke/parity.json' | ConvertFrom-Json
          $eventsSha = $parityJson.events.hashA
          $tradesSha = $parityJson.trades.hashA
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "events_sha=$eventsSha"
          Add-Content -Encoding UTF8 'artifacts/env/env.sanity.txt' "trades_sha=$tradesSha"
          Copy-Item -Path 'artifacts/env/env.sanity.txt' -Destination 'artifacts/demo-smoke/env.sanity' -Force
          $summary = @(
            '## Demo smoke snapshot',
            "- SIM_EXIT=$simExit",
            "- STRICT_EXIT=$strictExit",
            "- PARITY_EXIT=$parityExit",
            "- trades_row_count=$tradeRows",
            "- alert_block_count=$alertCount",
            "- events_sha=$eventsSha",
            "- trades_sha=$tradesSha",
            "- events_path=$eventsFull",
            "- trades_path=$tradesFull"
          )
          $summary | Set-Content -Encoding UTF8 -Path (Join-Path 'scratch' 'summary.md')
          $summary | ForEach-Object { Add-Content -Encoding UTF8 $env:GITHUB_STEP_SUMMARY $_ }

      - name: Upload demo smoke artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-smoke-${{ env.RUN_ID }}
          path: |
            artifacts/demo-smoke/**
            artifacts/env/env.sanity.txt
            scratch/summary.md

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-smoke-tests
          path: artifacts/test-results/**
          if-no-files-found: ignore
