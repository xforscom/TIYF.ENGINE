name: demo-daily-oanda

on:
  schedule:
    - cron: '10 2 * * 1-5'
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Run in dry mode (skip live actions)'
        required: false
        default: false
        type: boolean
      enableAlertPing:
        description: 'Enable prod alert ping on success'
        required: false
        default: false
        type: boolean
      requireOrderEvidence:
        description: 'Require OrderSend evidence when trades trigger'
        required: false
        default: false
        type: boolean
      alertEnv:
        description: 'Alert routing environment (prod | staging)'
        required: false
        default: ''

permissions:
  contents: read

concurrency:
  group: daily-oanda-${{ github.ref }}
  cancel-in-progress: true

jobs:
  demo-daily-oanda:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    timeout-minutes: 20
    defaults:
      run:
        shell: pwsh
    env:
      ADAPTER_MODE: oanda-demo
      RUN_ID: ${{ format('OANDA-DAILY-{0}', github.run_number) }}
      DRY_RUN: ${{ github.event_name == 'schedule' && 'false' || inputs.dryRun }}
      ENABLE_ALERT_PING: ${{ inputs.enableAlertPing || 'false' }}
      REQUIRE_ORDER_EVIDENCE: ${{ inputs.requireOrderEvidence || 'false' }}
      ALERT_ENV_INPUT: ${{ github.event.inputs.alertEnv }}
      ALERT_ENV_DEFAULT: ${{ vars.ALERT_ENV }}
      OANDA_ENV: ${{ secrets.OANDA_ENV }}
      OANDA_PRACTICE_ACCOUNT_ID: ${{ secrets.OANDA_PRACTICE_ACCOUNT_ID }}
      OANDA_PRACTICE_TOKEN: ${{ secrets.OANDA_PRACTICE_TOKEN }}
      EXPECTED_UNIVERSE_LINE: EURUSD, GBPUSD, USDJPY, USDCHF, USDCAD, AUDUSD, NZDUSD, XAUUSD
    steps:
      - name: Install PowerShell 7
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          POWERSHELL_VERSION="7.4.6"
          INSTALL_ROOT="$HOME/powershell"

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
            exit 0
          fi

          if [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
            exit 0
          fi

          mkdir -p "$INSTALL_ROOT"
          curl -fSLo powershell.tar.gz "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz"
          curl -fSLo checksums.txt "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/SHA256SUMS"
          EXPECTED_SUM="$(grep "powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz" checksums.txt | awk '{print $1}')"
          if [ -z "$EXPECTED_SUM" ]; then
            echo "ERROR: Unable to locate expected checksum for PowerShell archive" >&2
            exit 1
          fi
          ACTUAL_SUM="$(sha256sum powershell.tar.gz | awk '{print $1}')"
          if [ "$EXPECTED_SUM" != "$ACTUAL_SUM" ]; then
            echo "ERROR: Checksum verification failed for powershell.tar.gz" >&2
            echo "Expected: $EXPECTED_SUM" >&2
            echo "Actual:   $ACTUAL_SUM" >&2
            exit 1
          fi
          tar -xzf powershell.tar.gz -C "$INSTALL_ROOT"
          rm powershell.tar.gz checksums.txt

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/pwsh"
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
          elif [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh"
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
          else
            echo "Failed to locate pwsh after extraction" >&2
            find "$INSTALL_ROOT" -maxdepth 3 -type f -name 'pwsh' -print || true
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Validate secrets
        run: |
          $ErrorActionPreference = 'Stop'
          $required = @(
            @{ Name = 'OANDA_PRACTICE_TOKEN'; Value = $env:OANDA_PRACTICE_TOKEN },
            @{ Name = 'OANDA_PRACTICE_ACCOUNT_ID'; Value = $env:OANDA_PRACTICE_ACCOUNT_ID },
            @{ Name = 'OANDA_ENV'; Value = $env:OANDA_ENV }
          )
          foreach ($entry in $required) {
            if ([string]::IsNullOrWhiteSpace($entry.Value) -or $entry.Value -eq 'null') {
              throw "Missing required secret: $($entry.Name)"
            }
          }
          if ($env:OANDA_ENV -ne 'practice') {
            throw "OANDA_ENV must be 'practice' for demo daily runs (was '$($env:OANDA_ENV)')"
          }

      - name: Resolve config and safety rails
        run: |
          $ErrorActionPreference = 'Stop'
          $configPath = Join-Path $env:GITHUB_WORKSPACE 'sample-config.demo-oanda.json'
          if (-not (Test-Path $configPath)) {
            throw "Config file not found: $configPath"
          }
          $env:CONFIG_PATH = $configPath
          "CONFIG_PATH=$configPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $cfg = Get-Content $configPath | ConvertFrom-Json
          if ($null -eq $cfg) { throw "Unable to parse config at $configPath" }

          if ($cfg.perTradeRiskPct -gt 0.05) {
            throw "perTradeRiskPct too high: $($cfg.perTradeRiskPct)"
          }
          if ($cfg.realLeverageCap -gt 2.0) {
            throw "realLeverageCap too high: $($cfg.realLeverageCap)"
          }

          $expected = 'EURUSD','GBPUSD','USDJPY','USDCHF','USDCAD','AUDUSD','NZDUSD','XAUUSD'
          $expectedSorted = @($expected | Sort-Object)
          $actualSorted = @($cfg.universe | Sort-Object)
          if ($actualSorted.Count -ne $expectedSorted.Count -or ($actualSorted -join ',') -ne ($expectedSorted -join ',')) {
            throw "Universe drift detected. Expected: $($expectedSorted -join ',') Actual: $($actualSorted -join ',')"
          }

          "CONFIG_UNIVERSE=$($actualSorted -join ',')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore and build Release
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release --no-restore --nologo

      - name: Prepare directories
        run: |
          $ErrorActionPreference = 'Stop'
          foreach ($path in @('artifacts/oanda-daily', 'scratch')) {
            if (Test-Path $path) { Remove-Item -Recurse -Force $path }
          }
          New-Item -ItemType Directory -Force -Path 'artifacts/oanda-daily' | Out-Null
          New-Item -ItemType Directory -Force -Path 'scratch' | Out-Null

      - name: Resolve binaries
        run: |
          $ErrorActionPreference = 'Stop'
          $sim = Join-Path $PWD 'src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll'
          $tools = Join-Path $PWD 'src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll'
          if (-not (Test-Path $sim)) { throw "Simulator binary not found at $sim" }
          if (-not (Test-Path $tools)) { throw "Tools binary not found at $tools" }
          "SIM_DLL=$sim" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TOOLS_DLL=$tools" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Run simulator (OANDA daily)
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'scratch/oanda-sim.log'
          $errPath = 'scratch/oanda-sim.err'
          $runArgs = @('--config', $env:CONFIG_PATH, '--run-id', $env:RUN_ID, '--quiet')
          if ($env:DRY_RUN -eq 'true') {
            $runArgs += '--dry-run'
          }

          $process = Start-Process -FilePath 'dotnet' -ArgumentList @('exec', $env:SIM_DLL) + $runArgs -RedirectStandardOutput $logPath -RedirectStandardError 'scratch/oanda-sim.err' -NoNewWindow -PassThru
          if (-not $process.WaitForExit(90000)) {
            $process.Kill()
            throw "Simulator run timed out"
          }
          if ($process.ExitCode -ne 0) {
            Write-Warning ("Simulator exited with code {0}. Dumping logs..." -f $process.ExitCode)
            if (Test-Path $logPath) {
              Write-Host '--- oanda-sim.log (tail) ---'
              Get-Content $logPath | Select-Object -Last 200
            }
            if (Test-Path $errPath) {
              Write-Host '--- oanda-sim.err (tail) ---'
              Get-Content $errPath | Select-Object -Last 200
            }
            throw "Simulator exited with code $($process.ExitCode)"
          }
          "LOG_PATH=$logPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $eventsPath = 'journals/oanda-demo/{0}/events.csv' -f $env:RUN_ID
          $tradesPath = 'journals/oanda-demo/{0}/trades.csv' -f $env:RUN_ID
          if (-not (Test-Path $eventsPath)) { throw "Expected events journal $eventsPath not found" }
          if (-not (Test-Path $tradesPath)) { throw "Expected trades journal $tradesPath not found" }
          "EVENTS_PATH=$eventsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_PATH=$tradesPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify strict journal
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec $env:TOOLS_DLL verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'scratch/strict.json'
          $strictExit = $LASTEXITCODE
          "STRICT_EXIT=$strictExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($strictExit -ne 0) { throw "verify strict exited with $strictExit" }

      - name: Verify parity self-check
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec $env:TOOLS_DLL verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'scratch/parity.json'
          $parityExit = $LASTEXITCODE
          "PARITY_EXIT=$parityExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($parityExit -ne 0) { throw "verify parity exited with $parityExit" }

      - name: Check broker dangling
        run: |
          $ErrorActionPreference = 'Stop'
          $trades = Get-Content $env:TRADES_PATH | Select-Object -Skip 1
          $hasTrades = $false
          if ($trades) {
            foreach ($line in $trades) {
              if (-not [string]::IsNullOrWhiteSpace($line)) { $hasTrades = $true; break }
            }
          }
          $brokerDangling = if ($hasTrades) { 'true' } else { 'false' }
          "BROKER_DANGLING=$brokerDangling" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($brokerDangling -ne 'false') {
            throw "broker_dangling expected false but was $brokerDangling"
          }

      - name: Verify connectivity handshake
        run: |
          $ErrorActionPreference = 'Stop'
          $logFile = if ([string]::IsNullOrWhiteSpace($env:LOG_PATH)) { 'scratch/oanda-sim.log' } else { $env:LOG_PATH }
          if (-not (Test-Path -Path $logFile)) {
            throw "Log file not found: $logFile"
          }
          $pattern = 'Connected to OANDA \(practice\)'
          $handshake = Select-String -Path $logFile -Pattern $pattern | Select-Object -First 1
          if (-not $handshake) {
            throw "Expected handshake evidence '$pattern' not found in $logFile"
          }
          $line = $handshake.Line.Trim()
          "CONNECTIVITY_HANDSHAKE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "CONNECTIVITY_NOTE=$line" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Evaluate order evidence
        run: |
          $ErrorActionPreference = 'Stop'
          $eventsPath = $env:EVENTS_PATH
          $orderMatches = Select-String -Path $eventsPath -Pattern 'OrderSend' -AllMatches
          $orderFound = if ($orderMatches) { 'true' } else { 'false' }
          $note = if ($orderFound -eq 'true') { 'OrderSend evidence present' } else { 'No OrderSend journal entries observed' }

          $logNote = Select-String -Path $env:LOG_PATH -Pattern 'no trade criteria met (weekend/closed)' | Select-Object -First 1
          if ($logNote) {
            $note = "$note; $($logNote.Line.Trim())"
          }

          "ORDER_EVIDENCE=$orderFound" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "ORDER_NOTE=$note" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $requireRaw = if ([string]::IsNullOrWhiteSpace($env:REQUIRE_ORDER_EVIDENCE)) { 'false' } else { $env:REQUIRE_ORDER_EVIDENCE }
          try {
            $require = [System.Convert]::ToBoolean($requireRaw)
          } catch {
            throw "Invalid REQUIRE_ORDER_EVIDENCE value '$requireRaw'."
          }

          if ($require -and $orderFound -ne 'true') {
            throw "Order evidence required but not found"
          }

      - name: Verify journal provenance
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Select-String -Path $env:EVENTS_PATH -Pattern 'src_adapter=oanda-demo' -Quiet)) {
            throw "events.csv missing src_adapter=oanda-demo"
          }
          if (-not (Select-String -Path $env:TRADES_PATH -Pattern 'src_adapter=oanda-demo' -Quiet)) {
            throw "trades.csv missing src_adapter=oanda-demo"
          }

      - name: Collect artifacts
        run: |
          $ErrorActionPreference = 'Stop'
          $artifactDir = Join-Path $PWD 'artifacts/oanda-daily'
          Copy-Item -Path $env:EVENTS_PATH -Destination (Join-Path $artifactDir 'events.csv') -Force
          Copy-Item -Path $env:TRADES_PATH -Destination (Join-Path $artifactDir 'trades.csv') -Force
          Copy-Item -Path $env:LOG_PATH -Destination (Join-Path $artifactDir 'sim.log') -Force
          if (Test-Path 'scratch/strict.json') {
            Copy-Item -Path 'scratch/strict.json' -Destination (Join-Path $artifactDir 'strict.json') -Force
          }
          if (Test-Path 'scratch/parity.json') {
            Copy-Item -Path 'scratch/parity.json' -Destination (Join-Path $artifactDir 'parity.json') -Force
          }

      - name: Summarize results
        run: |
          $ErrorActionPreference = 'Stop'
          $strictExit = $env:STRICT_EXIT
          $parityExit = $env:PARITY_EXIT
          $brokerDangling = $env:BROKER_DANGLING
          $logFile = $env:LOG_PATH
          $eventsPath = $env:EVENTS_PATH
          $tradesPath = $env:TRADES_PATH
          $eventsSha = (Get-FileHash -Algorithm SHA256 -Path $eventsPath).Hash
          $tradesSha = (Get-FileHash -Algorithm SHA256 -Path $tradesPath).Hash
          $handshake = if ([string]::IsNullOrWhiteSpace($env:CONNECTIVITY_HANDSHAKE)) { 'false' } else { $env:CONNECTIVITY_HANDSHAKE }
          $handshakeNote = if ([string]::IsNullOrWhiteSpace($env:CONNECTIVITY_NOTE)) { 'n/a' } else { $env:CONNECTIVITY_NOTE }
          $orderEvidence = if ([string]::IsNullOrWhiteSpace($env:ORDER_EVIDENCE)) { 'false' } else { $env:ORDER_EVIDENCE }
          $orderNote = if ([string]::IsNullOrWhiteSpace($env:ORDER_NOTE)) { 'n/a' } else { $env:ORDER_NOTE }

          $summary = @(
            '## OANDA daily snapshot',
            "- Adapter: $env:ADAPTER_MODE",
            "- Commit: $env:GITHUB_SHA",
            "- Config: $env:CONFIG_PATH",
            "- Dry run: $env:DRY_RUN",
            "- STRICT_EXIT=$strictExit",
            "- PARITY_EXIT=$parityExit",
            "- broker_dangling=$brokerDangling",
            "- events_sha=$eventsSha",
            "- trades_sha=$tradesSha",
            "- connectivity: handshake=$handshake note=$handshakeNote",
            "- order_evidence: $orderEvidence ($orderNote)"
          )
          $summary | Set-Content -Encoding UTF8 -Path (Join-Path 'scratch' 'summary.md')
          $summary | ForEach-Object { Add-Content -Encoding UTF8 $env:GITHUB_STEP_SUMMARY $_ }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-demo-artifacts-adapter-oanda-demo
          path: |
            artifacts/oanda-daily/**
            scratch/summary.md

      - name: Upload unit test results (strict/parity)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: oanda-daily-checks
          path: |
            scratch/strict.json
            scratch/parity.json
          if-no-files-found: ignore

      - name: Send alert ping
        if: success()
        env:
          WEBHOOK_PROD: ${{ secrets.DEMO_ALERT_WEBHOOK_PROD }}
          WEBHOOK_STAGING: ${{ secrets.DEMO_ALERT_WEBHOOK_STAGING }}
        run: |
          $ErrorActionPreference = 'Stop'
          $enableRaw = if ([string]::IsNullOrWhiteSpace($env:ENABLE_ALERT_PING)) { 'false' } else { $env:ENABLE_ALERT_PING }
          try {
            $enable = [System.Convert]::ToBoolean($enableRaw)
          } catch {
            throw "Invalid ENABLE_ALERT_PING value '$enableRaw'."
          }
          if (-not $enable) {
            Write-Host 'Alert ping disabled; skipping.'
            "ALERT_HTTP_STATUS=skipped" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            return
          }

          $resolved = if ([string]::IsNullOrWhiteSpace($env:ALERT_ENV_INPUT)) { $env:ALERT_ENV_DEFAULT } else { $env:ALERT_ENV_INPUT }
          if ([string]::IsNullOrWhiteSpace($resolved)) {
            $resolved = 'prod'
          }

          $webhook = if ($resolved -eq 'prod') { $env:WEBHOOK_PROD } else { $env:WEBHOOK_STAGING }
          if ([string]::IsNullOrWhiteSpace($webhook) -or $webhook -eq 'null') {
            Write-Host "Alert webhook not configured for ALERT_ENV=$resolved; skipping."
            "ALERT_HTTP_STATUS=skipped" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            return
          }

          $payload = @{
            content = "demo-daily-oanda success run $env:GITHUB_RUN_ID handshake=$env:CONNECTIVITY_HANDSHAKE order=$env:ORDER_EVIDENCE"
          } | ConvertTo-Json -Compress

          try {
            $response = Invoke-WebRequest -Uri $webhook -Method Post -Body $payload -ContentType 'application/json'
            $status = [int]$response.StatusCode
            Write-Host "Alert ping HTTP status: $status"
            "ALERT_HTTP_STATUS=$status" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            if ($status -lt 200 -or $status -ge 300) {
              throw "Webhook returned non-success status $status"
            }
          } catch {
            $statusCode = 'unknown'
            if ($_.Exception.Response -and $null -ne $_.Exception.Response.StatusCode) {
              $statusCode = [int]$_.Exception.Response.StatusCode
            }
            "ALERT_HTTP_STATUS=$statusCode" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Warning "Alert ping failed. HTTP status: $statusCode. Error: $($_.Exception.Message)"
            throw
          }
