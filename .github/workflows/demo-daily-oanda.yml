name: demo-daily-oanda

on:
  schedule:
    - cron: '10 2 * * 1-5'
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Run in dry mode (skip live actions)'
        required: false
        default: false
        type: boolean
      enableAlertPing:
        description: 'Enable prod alert ping on success'
        required: false
        default: false
        type: boolean
      requireOrderEvidence:
        description: 'Require OrderSend evidence when trades trigger'
        required: false
        default: false
        type: boolean
      alertEnv:
        description: 'Alert routing environment (prod | staging)'
        required: false
        default: ''

permissions:
  contents: read

concurrency:
  group: daily-oanda-${{ github.ref }}
  cancel-in-progress: true

jobs:
  demo-daily-oanda:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    timeout-minutes: 20
    defaults:
      run:
        shell: pwsh
    env:
      ADAPTER_MODE: oanda-demo
      CONFIG_PATH: sample-config.demo-oanda.json
      RUN_ID: ${{ format('OANDA-DAILY-{0}', github.run_number) }}
      DRY_RUN: ${{ github.event_name == 'schedule' && 'false' || inputs.dryRun }}
      ENABLE_ALERT_PING: ${{ inputs.enableAlertPing || 'false' }}
      REQUIRE_ORDER_EVIDENCE: ${{ inputs.requireOrderEvidence || 'false' }}
      ALERT_ENV_INPUT: ${{ github.event.inputs.alertEnv }}
      ALERT_ENV_DEFAULT: ${{ vars.ALERT_ENV }}
      OANDA_ENV: ${{ secrets.OANDA_ENV }}
      OANDA_PRACTICE_ACCOUNT_ID: ${{ secrets.OANDA_PRACTICE_ACCOUNT_ID }}
      OANDA_PRACTICE_TOKEN: ${{ secrets.OANDA_PRACTICE_TOKEN }}
      EXPECTED_UNIVERSE_LINE: EURUSD, GBPUSD, USDJPY, USDCHF, USDCAD, AUDUSD, NZDUSD, XAUUSD
    steps:
      - name: Install PowerShell 7
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          POWERSHELL_VERSION="7.4.6"
          INSTALL_ROOT="$HOME/powershell"

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
            exit 0
          fi

          if [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
            exit 0
          fi

          mkdir -p "$INSTALL_ROOT"
          curl -fSLo powershell.tar.gz "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz"
          curl -fSLo checksums.txt "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/SHA256SUMS"
          EXPECTED_SUM="$(grep "powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz" checksums.txt | awk '{print $1}')"
          if [ -z "$EXPECTED_SUM" ]; then
            echo "ERROR: Unable to locate expected checksum for PowerShell archive" >&2
            exit 1
          fi
          ACTUAL_SUM="$(sha256sum powershell.tar.gz | awk '{print $1}')"
          if [ "$EXPECTED_SUM" != "$ACTUAL_SUM" ]; then
            echo "ERROR: Checksum verification failed for powershell.tar.gz" >&2
            echo "Expected: $EXPECTED_SUM" >&2
            echo "Actual:   $ACTUAL_SUM" >&2
            exit 1
          fi
          tar -xzf powershell.tar.gz -C "$INSTALL_ROOT"
          rm powershell.tar.gz checksums.txt

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/pwsh"
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
          elif [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh"
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
          else
            echo "Failed to locate pwsh after extraction" >&2
            find "$INSTALL_ROOT" -maxdepth 3 -type f -name 'pwsh' -print || true
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and build Release
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release --no-restore --nologo

      - name: Prepare directories
        run: |
          $ErrorActionPreference = 'Stop'
          foreach ($path in @('artifacts/oanda-smoke', 'scratch')) {
            if (Test-Path $path) { Remove-Item -Recurse -Force $path }
          }
          New-Item -ItemType Directory -Force -Path 'artifacts/oanda-smoke' | Out-Null
          New-Item -ItemType Directory -Force -Path 'scratch' | Out-Null

      - name: Resolve binaries
        run: |
          $ErrorActionPreference = 'Stop'
          $sim = Join-Path $PWD 'src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll'
          $tools = Join-Path $PWD 'src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll'
          if (-not (Test-Path $sim)) { throw "Simulator binary not found at $sim" }
          if (-not (Test-Path $tools)) { throw "Tools binary not found at $tools" }
          "SIM_DLL=$sim" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TOOLS_DLL=$tools" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Run simulator (OANDA daily)
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'scratch/oanda-sim.log'
          $runArgs = @('--config', $env:CONFIG_PATH, '--run-id', $env:RUN_ID, '--quiet')
          if ($env:DRY_RUN -eq 'true') {
            $runArgs += '--dry-run'
          }

          $process = Start-Process -FilePath 'dotnet' -ArgumentList @('exec', $env:SIM_DLL) + $runArgs -RedirectStandardOutput $logPath -RedirectStandardError 'scratch/oanda-sim.err' -NoNewWindow -PassThru
          if (-not $process.WaitForExit(90000)) {
            $process.Kill()
            throw "Simulator run timed out"
          }
          if ($process.ExitCode -ne 0) {
            throw "Simulator exited with code $($process.ExitCode)"
          }
          "LOG_PATH=$logPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $eventsPath = 'journals/oanda-demo/{0}/events.csv' -f $env:RUN_ID
          $tradesPath = 'journals/oanda-demo/{0}/trades.csv' -f $env:RUN_ID
          if (-not (Test-Path $eventsPath)) { throw "Expected events journal $eventsPath not found" }
          if (-not (Test-Path $tradesPath)) { throw "Expected trades journal $tradesPath not found" }
          "EVENTS_PATH=$eventsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_PATH=$tradesPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify strict journal
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec $env:TOOLS_DLL verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'scratch/strict.json'
          $strictExit = $LASTEXITCODE
          "STRICT_EXIT=$strictExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($strictExit -ne 0) { throw "verify strict exited with $strictExit" }

      - name: Verify parity self-check
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec $env:TOOLS_DLL verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'scratch/parity.json'
          $parityExit = $LASTEXITCODE
          "PARITY_EXIT=$parityExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($parityExit -ne 0) { throw "verify parity exited with $parityExit" }

      - name: Check broker dangling
        run: |
          $ErrorActionPreference = 'Stop'
          $trades = Get-Content $env:TRADES_PATH | Select-Object -Skip 1
          $hasTrades = $false
          if ($trades) {
            foreach ($line in $trades) {
              if (-not [string]::IsNullOrWhiteSpace($line)) { $hasTrades = $true; break }
            }
          }
          $brokerDangling = if ($hasTrades) { 'true' } else { 'false' }
          "BROKER_DANGLING=$brokerDangling" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($brokerDangling -ne 'false') {
            throw "broker_dangling expected false but was $brokerDangling"
          }

      - name: Verify connectivity handshake
        run: |
          $ErrorActionPreference = 'Stop'
          $logFile = if ([string]::IsNullOrWhiteSpace($env:LOG_PATH)) { 'scratch/oanda-sim.log' } else { $env:LOG_PATH }
          if (-not (Test-Path -Path $logFile)) {
            throw "Log file not found: $logFile"
          }
          $handshake = Select-String -Path $logFile -Pattern 'Connected to OANDA' | Select-Object -First 1
          if (-not $handshake) {
            throw "Expected handshake evidence 'Connected to OANDA' not found in $logFile"
          }

      - name: Collect artifacts
        run: |
          $ErrorActionPreference = 'Stop'
          $artifactDir = Join-Path $PWD 'artifacts/oanda-smoke'
          Copy-Item -Path $env:EVENTS_PATH -Destination (Join-Path $artifactDir 'events.csv') -Force
          Copy-Item -Path $env:TRADES_PATH -Destination (Join-Path $artifactDir 'trades.csv') -Force
          Copy-Item -Path $env:LOG_PATH -Destination (Join-Path $artifactDir 'sim.log') -Force
          if (Test-Path 'scratch/strict.json') {
            Copy-Item -Path 'scratch/strict.json' -Destination (Join-Path $artifactDir 'strict.json') -Force
          }
          if (Test-Path 'scratch/parity.json') {
            Copy-Item -Path 'scratch/parity.json' -Destination (Join-Path $artifactDir 'parity.json') -Force
          }

      - name: Summarize results
        run: |
          $ErrorActionPreference = 'Stop'
          $strictExit = $env:STRICT_EXIT
          $parityExit = $env:PARITY_EXIT
          $brokerDangling = $env:BROKER_DANGLING
          $logFile = $env:LOG_PATH
          $eventsPath = $env:EVENTS_PATH
          $tradesPath = $env:TRADES_PATH
          $eventsSha = (Get-FileHash -Algorithm SHA256 -Path $eventsPath).Hash
          $tradesSha = (Get-FileHash -Algorithm SHA256 -Path $tradesPath).Hash

          $summary = @(
            '## OANDA daily snapshot',
            "- Adapter: $env:ADAPTER_MODE",
            "- Config: $env:CONFIG_PATH",
            "- Run ID: $env:RUN_ID",
            "- STRICT_EXIT=$strictExit",
            "- PARITY_EXIT=$parityExit",
            "- broker_dangling=$brokerDangling",
            "- events_sha=$eventsSha",
            "- trades_sha=$tradesSha",
            "- log_path=$logFile"
          )
          $summary | Set-Content -Encoding UTF8 -Path (Join-Path 'scratch' 'summary.md')
          $summary | ForEach-Object { Add-Content -Encoding UTF8 $env:GITHUB_STEP_SUMMARY $_ }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: oanda-daily-artifacts
          path: |
            artifacts/oanda-smoke/**
            scratch/summary.md

      - name: Upload unit test results (strict/parity)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: oanda-daily-checks
          path: |
            scratch/strict.json
            scratch/parity.json
          if-no-files-found: ignore
