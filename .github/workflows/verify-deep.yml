name: verify-deep

on:
  push:
    branches: [ main, feat/m4-seed, feat/m5-seed ]
  pull_request:
    branches: [ main, feat/m4-seed, feat/m5-seed ]
  workflow_dispatch: {}

jobs:
  verify-deep:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Clean tree guard
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "$(git status --porcelain)" ]; then echo "Dirty tree before build"; git status; exit 1; fi
      - name: Restore (with retry)
        shell: bash
        run: |
          set -euo pipefail
          n=0
          until [ "$n" -ge 3 ]; do
            dotnet restore TiYf.Engine.sln && break
            n=$((n+1)); echo "Restore attempt $n failed; retrying in 3s..."; sleep 3
          done
          [ "$n" -lt 3 ] || { echo "Restore failed after retries"; exit 1; }
      - name: Build (Release)
        shell: bash
        run: |
          set -euo pipefail
          dotnet build TiYf.Engine.sln -c Release --nologo --no-restore
      - name: Build Tools CLI (Release)
        shell: bash
        run: |
          set -euo pipefail
          dotnet build src/TiYf.Engine.Tools/TiYf.Engine.Tools.csproj -c Release --nologo --no-restore
      - name: Resolve binaries
        id: paths
        shell: bash
        run: |
          ROOT="$GITHUB_WORKSPACE"
          SIM_R="$ROOT/src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          TOOLS_R="$ROOT/src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll"
          test -f "$SIM_R" || { echo "Sim dll not found"; exit 2; }
          test -f "$TOOLS_R" || { echo "Tools dll not found"; exit 2; }
          echo "SIM_DLL=$SIM_R" >> $GITHUB_ENV
          echo "TOOLS_DLL=$TOOLS_R" >> $GITHUB_ENV
          echo "sim=$SIM_R" >> $GITHUB_OUTPUT
          echo "tools=$TOOLS_R" >> $GITHUB_OUTPUT
      - name: Prepare artifact dirs
        shell: bash
        run: |
          set -euo pipefail
          rm -rf artifacts || true
          mkdir -p artifacts/verify-deep artifacts/logs artifacts/env
      - name: Capture environment snapshot
        shell: pwsh
        run: |
          Get-ChildItem Env:* | Sort-Object Name | Out-String | Set-Content -Encoding UTF8 artifacts/env/env.snapshot.txt
          "GITHUB_SHA=$Env:GITHUB_SHA`nGITHUB_REF=$Env:GITHUB_REF`nRUN_ATTEMPT=$Env:GITHUB_RUN_ATTEMPT" | Set-Content -Encoding UTF8 artifacts/env/env.sanity.txt
      - name: Run sim (fixture)
        id: run_sim
        shell: bash
        run: |
          set -euo pipefail
          CFG="tests/fixtures/backtest_m0/config.backtest-m0.json"
          rm -rf journals || true
          # Run and capture stdout to parse precise journal paths
          OUT=$(mktemp)
          set +e
          dotnet exec "$SIM_DLL" --config "$CFG" --run-id DEEP-CI --quiet | tee "$OUT"
          DOTNET_CODE=$?
          set -e
          if [ $DOTNET_CODE -ne 0 ]; then
            echo "Simulator exited with code $DOTNET_CODE" >&2
            echo '--- simulator stdout ---'
            cat "$OUT"
            exit $DOTNET_CODE
          fi
          # Parse events/trades paths from stdout
          EV=$(grep -m1 '^JOURNAL_DIR_EVENTS=' "$OUT" | cut -d= -f2 || true)
          TR=$(grep -m1 '^JOURNAL_DIR_TRADES=' "$OUT" | cut -d= -f2 || true)
          if [ -z "$EV" ] || [ -z "$TR" ]; then
            echo "Missing JOURNAL_DIR_* entries in simulator output" >&2
            echo '--- simulator stdout ---'
            cat "$OUT"
            exit 2
          fi
          test -f "$EV" && test -f "$TR"
          RUN_DIR=$(dirname "$EV")
          printf 'run_dir=%s\nevents=%s\ntrades=%s\n' "$RUN_DIR" "$EV" "$TR" >> artifacts/env/env.sanity.txt
          cp "$OUT" artifacts/logs/deep-sim.log
          cp "$EV" artifacts/verify-deep/events.csv
          cp "$TR" artifacts/verify-deep/trades.csv
          echo "events=$EV" >> $GITHUB_OUTPUT
          echo "trades=$TR" >> $GITHUB_OUTPUT
      - name: Strict verify
        shell: bash
        run: |
          set -euo pipefail
          JSON=$(dotnet exec "$TOOLS_DLL" verify strict --events "${{ steps.run_sim.outputs.events }}" --trades "${{ steps.run_sim.outputs.trades }}" --schema 1.3.0 --json)
          echo "$JSON" | tee artifacts/verify-deep/report.json
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-deep-${{ matrix.os }}
          path: |
            artifacts/verify-deep/**
            artifacts/logs/**
            artifacts/env/**