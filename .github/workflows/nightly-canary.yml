name: nightly-canary

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'
  pull_request:
    branches: [ main, feat/**, fix/** ]

concurrency:
  group: nightly-canary
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_exit: ${{ steps.build_release.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Build (Release)
        id: build_release
        run: |
          set -euo pipefail
          mkdir -p scratch
          set +e
          dotnet build TiYf.Engine.sln -c Release --nologo | tee scratch/build.out
          BUILD_EXIT=$?
          set -e
          echo "$BUILD_EXIT" > scratch/build_exit.txt
          echo "exit_code=$BUILD_EXIT" >> "$GITHUB_OUTPUT"
      - name: Upload Release binaries
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries
          path: |
            src/TiYf.Engine.Sim/bin/Release/net8.0
            src/TiYf.Engine.Tools/bin/Release/net8.0
      - name: Upload build diagnostics (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-build-logs
          path: |
            scratch/build.out
            scratch/build_exit.txt

  nightly-canary:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      DOTNET_NOLOGO: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Download Release binaries
        uses: actions/download-artifact@v4
        with:
          name: release-binaries
          path: release-binaries
      - name: Prepare scratch layout
        id: prep
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE/scratch/nightly/${{ matrix.os }}"
          rm -rf "$ROOT"
          mkdir -p "$ROOT/bin" "$ROOT/runs" "$ROOT/artifacts/parity" "$ROOT/state"
          SRC_ROOT="release-binaries/src"
          if [[ ! -d "$SRC_ROOT" ]]; then
            SRC_ROOT="release-binaries"
          fi
          COPY_EXIT=0
          if [[ -d "$SRC_ROOT/TiYf.Engine.Sim/bin/Release/net8.0" ]]; then
            cp -R "$SRC_ROOT/TiYf.Engine.Sim/bin/Release/net8.0/." "$ROOT/bin/"
          else
            COPY_EXIT=1
          fi
          if [[ -d "$SRC_ROOT/TiYf.Engine.Tools/bin/Release/net8.0" ]]; then
            cp -R "$SRC_ROOT/TiYf.Engine.Tools/bin/Release/net8.0/." "$ROOT/bin/"
          else
            COPY_EXIT=1
          fi
          echo "$COPY_EXIT" > "$ROOT/state/prep_exit.txt"
          if [[ ! -f "$ROOT/bin/TiYf.Engine.Sim.dll" || ! -f "$ROOT/bin/TiYf.Engine.Tools.dll" ]]; then
            COPY_EXIT=1
            echo "$COPY_EXIT" > "$ROOT/state/prep_exit.txt"
          fi
          echo "ROOT=$ROOT" >> "$GITHUB_ENV"
          echo "SIM=$ROOT/bin/TiYf.Engine.Sim.dll" >> "$GITHUB_ENV"
          echo "TOOLS=$ROOT/bin/TiYf.Engine.Tools.dll" >> "$GITHUB_ENV"
          echo "summary_root=$ROOT/artifacts" >> "$GITHUB_OUTPUT"
          echo "summary_csv=$ROOT/artifacts/parity_summary.csv" >> "$GITHUB_OUTPUT"
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
      - name: Execute modes
        id: runmodes
        run: |
          set -euo pipefail
          ROOT="${ROOT:?ROOT env missing}"
          SIM="${SIM:-}"
          TOOLS="${TOOLS:-}"
          BASE_CFG="$GITHUB_WORKSPACE/tests/fixtures/backtest_m0/config.backtest-m0.json"

          SUMMARY="$ROOT/artifacts/parity_summary.csv"
          printf 'mode,trades_sha,penalty_count,events_sha,run_dir,status,hint,sim_exit,parity_exit\n' > "$SUMMARY"
          SUMMARY_MD="$ROOT/artifacts/summary.md"
          printf '### Nightly canary parity (%s)\n\n' "${{ matrix.os }}" > "$SUMMARY_MD"

          MODES=(off shadow active penalty-active)
          for MODE in "${MODES[@]}"; do
            RUN_ROOT="$ROOT/runs/$MODE"
            mkdir -p "$RUN_ROOT"
            CFG="$RUN_ROOT/config.${MODE}.json"
            RID="CANARY-${MODE^^}"
            STATUS="ok"
            HINTS=()
            SIM_EXIT=1

            if [[ ! -f "$SIM" || ! -f "$TOOLS" ]]; then
              STATUS="missing-binaries"
              HINTS+=("Release binaries unavailable")
            else
              node -e "const fs=require('fs'),path=require('path');const mode=process.env.MODE;const cfg=JSON.parse(fs.readFileSync(process.env.CFG_IN,'utf8'));cfg.name=cfg.name||'backtest-m0';cfg.output=cfg.output||{};cfg.output.journalDir=path.resolve(process.env.RUN_ROOT,'journals');cfg.featureFlags=cfg.featureFlags||{};cfg.featureFlags.sentiment='off';cfg.featureFlags.risk='off';if(mode==='shadow')cfg.featureFlags.penalty='shadow';else if(mode==='active'||mode==='penalty-active')cfg.featureFlags.penalty='active';else cfg.featureFlags.penalty='off';cfg.penaltyConfig=cfg.penaltyConfig||{};if(mode==='penalty-active'){cfg.penaltyConfig.forcePenalty=true;cfg.ciPenaltyScaffold=true;}fs.mkdirSync(cfg.output.journalDir,{recursive:true});fs.writeFileSync(process.env.CFG_OUT,JSON.stringify(cfg,null,2)+'\n','utf8');" MODE="$MODE" CFG_IN="$BASE_CFG" CFG_OUT="$CFG" RUN_ROOT="$RUN_ROOT"

              set +e
              dotnet exec "$SIM" --config "$CFG" --run-id "$RID" >"$RUN_ROOT/sim.out" 2>"$RUN_ROOT/sim.err"
              SIM_EXIT=$?
              cat "$RUN_ROOT/sim.out"
              cat "$RUN_ROOT/sim.err" >&2
              set -e
              echo "$SIM_EXIT" > "$RUN_ROOT/sim_exit.txt"
              if [[ "$SIM_EXIT" != "0" ]]; then
                STATUS="sim_rc=$SIM_EXIT"
                HINTS+=("sim failed")
              fi
            fi

            EVENTS_PATH="$(grep -m1 '^JOURNAL_DIR_EVENTS=' "$RUN_ROOT/sim.out" 2>/dev/null | cut -d= -f2-)"
            TRADES_PATH="$(grep -m1 '^JOURNAL_DIR_TRADES=' "$RUN_ROOT/sim.out" 2>/dev/null | cut -d= -f2-)"
            EVENTS_PATH="${EVENTS_PATH%$'\r'}"
            TRADES_PATH="${TRADES_PATH%$'\r'}"

            if [[ -z "$EVENTS_PATH" || ! -f "$EVENTS_PATH" ]]; then
              EVENTS_PATH="$RUN_ROOT/journals/$RID/events.csv"
            fi
            if [[ -z "$TRADES_PATH" || ! -f "$TRADES_PATH" ]]; then
              TRADES_PATH="$RUN_ROOT/journals/$RID/trades.csv"
            fi

            echo "$EVENTS_PATH" > "$RUN_ROOT/events_path.txt"
            echo "$TRADES_PATH" > "$RUN_ROOT/trades_path.txt"

            if [[ ! -f "$EVENTS_PATH" ]]; then
              STATUS="${STATUS}|missing_events"
              HINTS+=("events missing")
            fi
            if [[ ! -f "$TRADES_PATH" ]]; then
              STATUS="${STATUS}|missing_trades"
              HINTS+=("trades missing")
            fi

            PENALTY_COUNT=0
            RUN_DIR=""
            if [[ -f "$EVENTS_PATH" ]]; then
              PENALTY_COUNT=$(grep -c 'PENALTY_APPLIED' "$EVENTS_PATH" 2>/dev/null || echo 0)
              RUN_DIR=$(python -c "import os,sys; print(os.path.dirname(os.path.abspath(sys.argv[1])))" "$EVENTS_PATH")
            elif [[ -f "$TRADES_PATH" ]]; then
              RUN_DIR=$(python -c "import os,sys; print(os.path.dirname(os.path.abspath(sys.argv[1])))" "$TRADES_PATH")
            fi
            echo "$RUN_DIR" > "$RUN_ROOT/run_dir.txt"

            PARITY_EXIT=0
            EVENTS_SHA=""
            TRADES_SHA=""
            if [[ "$STATUS" == "ok" ]]; then
              set +e
              dotnet exec "$TOOLS" verify parity \
                --events-a "$EVENTS_PATH" --events-b "$EVENTS_PATH" \
                --trades-a "$TRADES_PATH" --trades-b "$TRADES_PATH" \
                --json | tee "$RUN_ROOT/parity.json"
              PARITY_EXIT=$?
              set -e
              if [[ "$PARITY_EXIT" != "0" ]]; then
                STATUS="${STATUS}|parity_rc=$PARITY_EXIT"
                HINTS+=("parity self-check failed")
              fi
              if [[ -f "$RUN_ROOT/parity.json" ]]; then
                readarray -t HASHES < <(python -c "import json,sys; data=json.load(open(sys.argv[1])); print(data.get('events',{}).get('hashA','')); print(data.get('trades',{}).get('hashA',''))" "$RUN_ROOT/parity.json")
                EVENTS_SHA="${HASHES[0]}"
                TRADES_SHA="${HASHES[1]}"
              fi
            else
              PARITY_EXIT=1
            fi
            echo "$PARITY_EXIT" > "$RUN_ROOT/parity_exit.txt"

            STATUS_TRIMMED="${STATUS#ok|}"
            STATUS_TRIMMED="${STATUS_TRIMMED%|}"
            if [[ "$STATUS_TRIMMED" == "" ]]; then
              STATUS_LABEL="ok"
            else
              STATUS_LABEL="$STATUS_TRIMMED"
            fi

            HINT=""
            if (( ${#HINTS[@]} )); then
              HINT=$(IFS='; '; echo "${HINTS[*]}")
            fi
            echo "$STATUS_LABEL" > "$RUN_ROOT/status.txt"
            echo "$HINT" > "$RUN_ROOT/hint.txt"
            printf 'mode=%s\ntrades_sha=%s\nevents_sha=%s\npenalty_count=%s\nrun_dir=%s\n' "$MODE" "$TRADES_SHA" "$EVENTS_SHA" "$PENALTY_COUNT" "$RUN_DIR" > "$RUN_ROOT/hashes.txt"

            printf '%s,%s,%s,%s,%s,%s,%s,%s,%s\n' "$MODE" "$TRADES_SHA" "$PENALTY_COUNT" "$EVENTS_SHA" "$RUN_DIR" "$STATUS_LABEL" "$HINT" "${SIM_EXIT:-1}" "$PARITY_EXIT" >> "$SUMMARY"

            if [[ "$STATUS_LABEL" == "ok" ]]; then
              printf '✅ **%s** — parity OK (trades_sha=%s)\n' "$MODE" "$TRADES_SHA" >> "$SUMMARY_MD"
            else
              printf '❌ **%s** — %s %s\n' "$MODE" "$STATUS_LABEL" "$HINT" >> "$SUMMARY_MD"
            fi

            MODE_ARTIFACT="$ROOT/artifacts/parity/$MODE"
            mkdir -p "$MODE_ARTIFACT"
            cp -f "$RUN_ROOT"/*.out "$RUN_ROOT"/*.txt "$RUN_ROOT"/*.json "$MODE_ARTIFACT" 2>/dev/null || true
            [[ -f "$RUN_ROOT/sim.err" ]] && cp -f "$RUN_ROOT/sim.err" "$MODE_ARTIFACT/"
            [[ -f "$EVENTS_PATH" ]] && cp -f "$EVENTS_PATH" "$MODE_ARTIFACT/events.csv"
            [[ -f "$TRADES_PATH" ]] && cp -f "$TRADES_PATH" "$MODE_ARTIFACT/trades.csv"
          done

          echo "summary_csv=$SUMMARY" >> "$GITHUB_OUTPUT"
          echo "summary_md=$SUMMARY_MD" >> "$GITHUB_OUTPUT"
      - name: Publish summary
        run: |
          set -euo pipefail
          ROOT="${ROOT:?ROOT env missing}"
          SUMMARY_MD="${{ steps.runmodes.outputs.summary_md }}"
          [[ -f "$SUMMARY_MD" ]] && cat "$SUMMARY_MD" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          column -s, -t "${{ steps.runmodes.outputs.summary_csv }}" 2>/dev/null >> "$GITHUB_STEP_SUMMARY" || cat "${{ steps.runmodes.outputs.summary_csv }}" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
      - name: Collect diagnostics
        if: always()
        run: |
          set -euo pipefail
          ROOT="${ROOT:?ROOT env missing}"
          mkdir -p "$ROOT/artifacts/meta"
          cp "$ROOT/state/prep_exit.txt" "$ROOT/artifacts/meta/prep_exit.txt"
          cp "${{ steps.runmodes.outputs.summary_csv }}" "$ROOT/artifacts/parity_summary.csv"
          [[ -f "${{ steps.runmodes.outputs.summary_md }}" ]] && cp "${{ steps.runmodes.outputs.summary_md }}" "$ROOT/artifacts/summary.md"
      - name: Invariants (final gate)
        shell: python
        env:
          SUMMARY_CSV: ${{ steps.runmodes.outputs.summary_csv }}
          BUILD_EXIT: ${{ needs.build.outputs.build_exit }}
          PREP_EXIT_PATH: ${{ steps.prep.outputs.root }}/state/prep_exit.txt
        run: |
          import csv
          import os
          import sys

          build_exit = os.environ.get("BUILD_EXIT", "1")
          if build_exit != "0":
              print(f"dotnet build exited with {build_exit}", file=sys.stderr)
              sys.exit(2)

          prep_exit_path = os.environ.get("PREP_EXIT_PATH")
          try:
              with open(prep_exit_path, "r", encoding="utf-8") as fh:
                  prep_exit = fh.read().strip() or "1"
          except OSError:
              prep_exit = "1"

          if prep_exit != "0":
              print("Release binaries unavailable during prepare", file=sys.stderr)
              sys.exit(2)

          summary_csv = os.environ.get("SUMMARY_CSV")
          if not summary_csv:
              print("summary csv missing", file=sys.stderr)
              sys.exit(2)

          required = ["off", "shadow", "active", "penalty-active"]
          rows = {}
          failures = []

          try:
              with open(summary_csv, newline="", encoding="utf-8") as fh:
                  reader = csv.DictReader(fh)
                  for row in reader:
                      mode = row.get("mode")
                      if not mode:
                          failures.append("row missing mode")
                          continue
                      rows[mode] = row
                      status = row.get("status")
                      if status != "ok":
                          hint = row.get("hint") or ""
                          failures.append(f"mode {mode} status={status} {hint}".strip())
          except OSError as exc:
              print(f"unable to read summary: {exc}", file=sys.stderr)
              sys.exit(2)

          missing = [mode for mode in required if mode not in rows]
          if missing:
              failures.append("missing modes: " + ", ".join(missing))

          def trades_sha(mode: str) -> str:
              row = rows.get(mode)
              return row.get("trades_sha", "") if row else ""

          if rows.get("off") and rows.get("shadow"):
              if trades_sha("off") != trades_sha("shadow"):
                  failures.append("off vs shadow trades_sha mismatch")
          else:
              failures.append("missing data for off/shadow comparison")

          if rows.get("shadow") and rows.get("active"):
              if trades_sha("shadow") != trades_sha("active"):
                  failures.append("shadow vs active trades_sha mismatch")
          else:
              failures.append("missing data for shadow/active comparison")

          penalty_row = rows.get("penalty-active")
          if penalty_row:
              try:
                  penalty_count = int(penalty_row.get("penalty_count") or 0)
              except (TypeError, ValueError):
                  penalty_count = 0
              if penalty_count < 1:
                  failures.append("penalty-active has no penalty lines")
          else:
              failures.append("missing penalty-active mode data")

          if failures:
              for item in failures:
                  print(item)
              sys.exit(2)

          print("invariants satisfied")
      - name: Upload parity artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-canary-${{ matrix.os }}
          path: |
            ${{ steps.runmodes.outputs.summary_csv }}
            ${{ steps.runmodes.outputs.summary_md }}
            ${{ steps.prep.outputs.summary_root }}/parity/**
            ${{ steps.prep.outputs.root }}/state/prep_exit.txt
