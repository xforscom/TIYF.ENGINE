name: nightly-canary

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'
  pull_request:
    branches: [ main, feat/**, fix/** ]

concurrency:
  group: nightly-canary
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Build (Release)
        run: dotnet build TiYf.Engine.sln -c Release --nologo
      - name: Upload Release binaries
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries
          path: |
            src/TiYf.Engine.Sim/bin/Release/net8.0
            src/TiYf.Engine.Tools/bin/Release/net8.0

  nightly-canary:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Download Release binaries
        uses: actions/download-artifact@v4
        with:
          name: release-binaries
          path: release-binaries
      - name: Sync built binaries
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src/TiYf.Engine.Sim/bin/Release/net8.0
          mkdir -p src/TiYf.Engine.Tools/bin/Release/net8.0
          SOURCE_ROOT="release-binaries/src"
          if [ ! -d "$SOURCE_ROOT" ]; then
            SOURCE_ROOT="release-binaries"
          fi
          if [ ! -d "$SOURCE_ROOT" ]; then
            echo "Unable to locate Release binaries in artifact payload" >&2
            ls -R release-binaries || true
            exit 1
          fi
          rsync -a "$SOURCE_ROOT/" src/
      - name: Run canary modes
        id: modes
        shell: bash
        run: |
          set -euo pipefail
          resolve_journal() {
            local raw="$1"
            local label="$2"
            if [ -z "$raw" ]; then
              echo "Missing $label journal path" >&2
              exit 1
            fi
            if [ -f "$raw" ]; then
              echo "$raw"
              return 0
            fi
            if [ -d "$raw" ]; then
              local candidate="$raw/${label}.csv"
              if [ -f "$candidate" ]; then
                echo "$candidate"
                return 0
              fi
              echo "Directory $raw does not contain ${label}.csv" >&2
              exit 1
            fi
            echo "Journal path $raw does not exist" >&2
            exit 1
          }

          ROOT="$GITHUB_WORKSPACE"
          SIM="$ROOT/src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          TOOLS="$ROOT/src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll"
          BASE_CFG="$ROOT/tests/fixtures/backtest_m0/config.backtest-m0.json"
          MODES=(off shadow active penalty-active)
          mkdir -p artifacts/parity
          SUMMARY="artifacts/parity_summary.csv"
          echo "mode,trades_hash,penalty_count" > "$SUMMARY"
          rm -rf "$ROOT/journals" || true
          for MODE in "${MODES[@]}"; do
            CFG=$(mktemp)
            jq '.featureFlags.sentiment="off" | .featureFlags.risk="off"' "$BASE_CFG" > "$CFG"
            case "$MODE" in
              off)
                jq '.featureFlags.penalty="off"' "$CFG" > "$CFG.tmp" && mv "$CFG.tmp" "$CFG"
                ;;
              shadow)
                jq '.featureFlags.penalty="shadow"' "$CFG" > "$CFG.tmp" && mv "$CFG.tmp" "$CFG"
                ;;
              active)
                jq '.featureFlags.penalty="active"' "$CFG" > "$CFG.tmp" && mv "$CFG.tmp" "$CFG"
                ;;
              penalty-active)
                jq '.featureFlags.penalty="active" | .penaltyConfig = (.penaltyConfig // {}) | .penaltyConfig.forcePenalty=true' "$CFG" > "$CFG.tmp" && mv "$CFG.tmp" "$CFG"
                ;;
            esac
            RUN_ID="CANARY-${MODE^^}"
            OUT=$(mktemp)
            dotnet exec "$SIM" --config "$CFG" --run-id "$RUN_ID" --quiet | tee "$OUT"
            EV=$(grep -m1 '^JOURNAL_DIR_EVENTS=' "$OUT" | cut -d= -f2-)
            TR=$(grep -m1 '^JOURNAL_DIR_TRADES=' "$OUT" | cut -d= -f2-)
            if [ -z "$EV" ] || [ -z "$TR" ]; then
              echo "Failed to capture journal paths for mode $MODE" >&2
              exit 1
            fi
            EV_FILE=$(resolve_journal "$EV" events)
            TR_FILE=$(resolve_journal "$TR" trades)
            KEY=${MODE//-/_}
            echo "ev_${KEY}=$EV_FILE" >> "$GITHUB_OUTPUT"
            echo "tr_${KEY}=$TR_FILE" >> "$GITHUB_OUTPUT"
            MODE_DIR="artifacts/parity/$MODE"
            mkdir -p "$MODE_DIR"
            set +e
            dotnet exec "$TOOLS" verify parity \
              --events-a "$EV_FILE" \
              --events-b "$EV_FILE" \
              --trades-a "$TR_FILE" \
              --trades-b "$TR_FILE" \
              --json | tee "$MODE_DIR/parity-parrot.json"
            CODE=$?
            set -e
            if [ $CODE -ne 0 ]; then
              echo "Parity self-check failed for mode $MODE" >&2
              exit $CODE
            fi
            EVENTS_HASH=$(jq -r '.events.hashA // empty' "$MODE_DIR/parity-parrot.json")
            TRADES_HASH=$(jq -r '.trades.hashA // empty' "$MODE_DIR/parity-parrot.json")
            if [ -z "$TRADES_HASH" ]; then
              echo "Unable to extract trades hash for mode $MODE" >&2
              exit 1
            fi
            PENALTY_COUNT=$(grep -c 'PENALTY_APPLIED_V1' "$EV_FILE" || true)
            {
              echo "mode=$MODE"
              echo "events_hash=$EVENTS_HASH"
              echo "trades_hash=$TRADES_HASH"
              echo "penalty_count=$PENALTY_COUNT"
              echo "events_path=$EV_FILE"
              echo "trades_path=$TR_FILE"
            } > "$MODE_DIR/hashes.txt"
            echo "$MODE,$TRADES_HASH,$PENALTY_COUNT" >> "$SUMMARY"
          done
      - name: Check invariants
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import csv, sys
          required = ["off", "shadow", "active", "penalty-active"]
          rows = {}
          with open("artifacts/parity_summary.csv", newline="") as fh:
            reader = csv.DictReader(fh)
            for row in reader:
              rows[row["mode"]] = row
          missing = [m for m in required if m not in rows]
          if missing:
            sys.exit(f"Missing canary modes: {', '.join(missing)}")
          if rows["off"]["trades_hash"] != rows["shadow"]["trades_hash"]:
            sys.exit("off vs shadow trades hash mismatch")
          if rows["shadow"]["trades_hash"] != rows["active"]["trades_hash"]:
            sys.exit("shadow vs active trades hash mismatch")
          penalty = int(rows["penalty-active"]["penalty_count"] or 0)
          if penalty < 1:
            sys.exit("penalty-active produced no penalty events")
          PY
      - name: Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "### Nightly Canary Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          cat artifacts/parity_summary.csv >> "$GITHUB_STEP_SUMMARY"
      - name: Upload parity artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-canary-artifacts
          path: |
            artifacts/parity
            artifacts/parity_summary.csv
