name: demo-daily-ctrader

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:
    inputs:
      useHostedFallback:
        description: 'Use hosted fallback runner if self-hosted is unavailable'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  demo-daily-ctrader:
    runs-on: ${{ inputs.useHostedFallback == true && 'windows-latest' || '[self-hosted, windows, tiyf-demo-live]' }}
    defaults:
      run:
        shell: pwsh
    environment: ctrader-demo
    env:
      RUN_ID: DEMO-CTRADER-DAILY-${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup .NET 8
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
        with:
          dotnet-version: '8.0.x'

      - name: Restore and build Release
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release --no-restore --nologo

      - name: Run DemoFeed
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'demo-ctrader.log'
          $args = @('--run-id', $env:RUN_ID, '--broker-enabled', 'true', '--broker-fill-mode', 'ioc-market')
          dotnet exec src/TiYf.Engine.DemoFeed/bin/Release/net8.0/TiYf.Engine.DemoFeed.dll @args | Tee-Object -FilePath $logPath
          $exitCode = $LASTEXITCODE
          if ($exitCode -ne 0) { throw "DemoFeed exited with $exitCode" }
          $eventsLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_EVENTS='
          $tradesLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_TRADES='
          $runDirLine = Select-String -Path $logPath -Pattern '^RUN_DIR='
          $infoLine = Select-String -Path $logPath -Pattern '^INFO first_ts='
          if (-not $eventsLine -or -not $tradesLine -or -not $runDirLine -or -not $infoLine) { throw "Missing output lines" }
          $eventsPath = ($eventsLine | Select-Object -First 1).Line.Split('=')[1]
          $tradesPath = ($tradesLine | Select-Object -First 1).Line.Split('=')[1]
          $runDirectory = ($runDirLine | Select-Object -First 1).Line.Split('=')[1]
          $brokerDangling = if ($infoLine -match 'broker_dangling=(true|false)') { $matches[1] } else { 'unknown' }
          "EVENTS_PATH=$eventsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_PATH=$tradesPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RUN_DIR=$runDirectory" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "BROKER_DANGLING=$brokerDangling" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Strict
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'strict.json'
          $strictExit = $LASTEXITCODE
          "STRICT_EXIT=$strictExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Parity
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'parity.json'
          $parityExit = $LASTEXITCODE
          "PARITY_EXIT=$parityExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Collect Artifacts
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Path 'artifacts' -Force
          Copy-Item -Path $env:EVENTS_PATH -Destination 'artifacts/events.csv' -Force
          Copy-Item -Path $env:TRADES_PATH -Destination 'artifacts/trades.csv' -Force
          Copy-Item -Path 'strict.json' -Destination 'artifacts/strict.json' -Force
          Copy-Item -Path 'parity.json' -Destination 'artifacts/parity.json' -Force
          Copy-Item -Path 'demo-ctrader.log' -Destination 'artifacts/demo-ctrader.log' -Force

      - name: Upload Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-daily-ctrader-${{ env.RUN_ID }}
          path: artifacts/**

concurrency:
  group: demo-daily-ctrader
  cancel-in-progress: false

timeout-minutes: 30