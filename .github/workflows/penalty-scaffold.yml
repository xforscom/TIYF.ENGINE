name: penalty-scaffold

on:
  push:
    branches: [ main, feat/m4-seed ]
  pull_request:
    branches: [ main, feat/m4-seed ]
  workflow_dispatch: {}

jobs:
  penalty:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Ensure jq tool
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            mkdir -p "$HOME/.local/bin"
            curl -sSL "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64" -o "$HOME/.local/bin/jq"
            chmod +x "$HOME/.local/bin/jq"
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          fi
      - name: Build + Run + Assert penalty scaffold
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          SLN="$ROOT/TiYf.Engine.sln"
          SIM="$ROOT/src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          TMP="$ROOT/_tmp_penalty.json"
          echo "[Step] Build solution"
          dotnet build "$SLN" -c Release --nologo
          echo "[Step] Create penalty-enabled config"
          jq '.featureFlags.penalty="shadow" | .featureFlags.sentiment="off" | .penaltyConfig={"forcePenalty":true} | .ciPenaltyScaffold=true' "$ROOT/tests/fixtures/backtest_m0/config.backtest-m0.json" > "$TMP"
          echo "[Step] Run sim with penalty"
          rm -rf "$ROOT/journals" || true
          dotnet exec "$SIM" --config "$TMP" --run-id PEN-CI --quiet || { echo 'Sim run failed'; exit 2; }
          RUN_DIR=$(find "$ROOT/journals" -type d -name '*PEN-CI*' | sort | tail -n1)
          echo "RUN_DIR=$RUN_DIR"
          test -n "$RUN_DIR" || { echo 'No run directory'; ls -R "$ROOT/journals" || true; exit 2; }
          EV="$RUN_DIR/events.csv"; TR="$RUN_DIR/trades.csv"; test -f "$EV" || { echo 'Missing events'; exit 2; }
          CNT=$(grep -c 'PENALTY_APPLIED_V1' "$EV" || true)
          echo "Penalty count=$CNT"
          echo "::group::Penalty lines (up to 10)"; grep 'PENALTY_APPLIED_V1' "$EV" | head || true; echo "::endgroup::"
          echo "[Step] Locate parity artifact (if any)"
          PARITY_HASH="$(find "$ROOT/artifacts/parity" -type f -name hashes.txt 2>/dev/null | sort | tail -n1 || true)"
          if [ -f "$PARITY_HASH" ]; then echo "Found parity hashes: $PARITY_HASH"; cat "$PARITY_HASH"; else echo "No parity hashes.txt found (may be expected)"; fi
          mkdir -p artifacts/penalty && cp "$EV" "$TR" artifacts/penalty/ || true
          if [ "${CNT:-0}" -lt 1 ]; then echo 'ERROR: expected at least one PENALTY_APPLIED_V1'; exit 2; fi
      - name: Upload penalty artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: penalty-scaffold-artifacts
          path: artifacts/penalty