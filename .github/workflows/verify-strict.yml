name: verify-strict

on:
  workflow_dispatch:
  pull_request:
    branches: [ main, feat/**, fix/** ]
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Build (Release)
        run: dotnet build TiYf.Engine.sln -c Release --nologo
      - name: Upload Release binaries
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries
          path: |
            src/TiYf.Engine.Sim/bin/Release/net8.0
            src/TiYf.Engine.Tools/bin/Release/net8.0

  verify-strict:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Download Release binaries
        uses: actions/download-artifact@v4
        with:
          name: release-binaries
          path: release-binaries
      - name: Sync binaries
        shell: bash
        run: |
          set -euo pipefail
          rsync -a release-binaries/src/TiYf.Engine.Sim/bin/Release/net8.0/ src/TiYf.Engine.Sim/bin/Release/net8.0/
          rsync -a release-binaries/src/TiYf.Engine.Tools/bin/Release/net8.0/ src/TiYf.Engine.Tools/bin/Release/net8.0/
      - name: Build + Generate + Verify (strict)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          TOOLS="$ROOT/src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll"
          SIM="$ROOT/src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          CFG="$ROOT/tests/fixtures/backtest_m0/config.backtest-m0.json"
          if [ ! -f "$TOOLS" ]; then echo "Tools DLL missing at $TOOLS" >&2; exit 1; fi
          if [ ! -f "$SIM" ]; then echo "Sim DLL missing at $SIM" >&2; exit 1; fi
          echo "[Step] Run Sim (fixture)"
          rm -rf "$ROOT/journals" || true
          dotnet exec "$SIM" --config "$CFG" --run-id STRICT-CI --quiet || { echo 'Sim run failed'; exit 2; }
          RUN_DIR="$(find "$ROOT/journals" -type d -name '*STRICT-CI*' | sort | tail -n1)"
          echo "RUN_DIR=$RUN_DIR"
          test -n "$RUN_DIR" || { echo 'No run directory found'; ls -R "$ROOT/journals" || true; exit 2; }
          EV="$RUN_DIR/events.csv"; TR="$RUN_DIR/trades.csv"
          test -f "$EV" && test -f "$TR" || { echo 'Missing events/trades'; ls -R "$RUN_DIR"; exit 2; }
          echo "Events size: $(wc -l < "$EV") lines"; echo "Trades size: $(wc -l < "$TR") lines"
          echo "[Step] Strict verify"
          set +e
          VERIFY_JSON=$(dotnet exec "$TOOLS" verify strict --events "$EV" --trades "$TR" --schema 1.3.0 --json)
          EC=$?
          set -e
          echo "::group::STRICT VERIFY JSON"; echo "$VERIFY_JSON"; echo "::endgroup::"
          mkdir -p artifacts/verify-strict
          cp "$EV" "$TR" artifacts/verify-strict/
          if [ $EC -ne 0 ]; then
            echo "Verifier exit code=$EC"; exit $EC
          fi
      - name: Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "### Verify Strict" >> "$GITHUB_STEP_SUMMARY"
          if [ -f artifacts/verify-strict/events.csv ]; then
            echo "Events: $(wc -l < artifacts/verify-strict/events.csv) rows" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -f artifacts/verify-strict/trades.csv ]; then
            echo "Trades: $(wc -l < artifacts/verify-strict/trades.csv) rows" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-strict-artifacts
          path: artifacts/verify-strict