name: verify-strict

on:
  push:
    branches: [ main, feat/m4-seed ]
  pull_request:
    branches: [ main, feat/m4-seed ]
  workflow_dispatch:

jobs:
  verify-strict:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Build + Generate + Verify (strict)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          SLN="$ROOT/TiYf.Engine.sln"
          # Resolve Release binaries only
          TOOLS_R="$ROOT/src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll"
          SIM="$ROOT/src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll"
          CFG="$ROOT/tests/fixtures/backtest_m0/config.backtest-m0.json"
          echo "[Step] Build solution"
          dotnet build "$SLN" -c Release --nologo
          # Resolve Tools path after build (Release only)
          if [ ! -f "$TOOLS_R" ]; then
            echo "Release Tools dll not found: $TOOLS_R" >&2
            find "$ROOT/src/TiYf.Engine.Tools/bin" -maxdepth 3 -type f -name 'TiYf.Engine.Tools.dll' -print || true
            exit 2
          fi
          if [ ! -f "$SIM" ]; then
            echo "Release Sim dll not found: $SIM" >&2
            exit 2
          fi
          TOOLS="$TOOLS_R"
          echo "[Step] Run Sim (fixture)"
          rm -rf "$ROOT/journals" || true
          OUT=$(mktemp)
          set +e
          dotnet exec "$SIM" --config "$CFG" --run-id STRICT-CI --quiet | tee "$OUT"
          SIM_CODE=${PIPESTATUS[0]}
          set -e
          if [ $SIM_CODE -ne 0 ]; then
            echo "Sim run failed with code $SIM_CODE" >&2
            echo '--- simulator stdout ---'
            cat "$OUT"
            exit $SIM_CODE
          fi
          EV=$(grep -m1 '^JOURNAL_DIR_EVENTS=' "$OUT" | cut -d= -f2 || true)
          TR=$(grep -m1 '^JOURNAL_DIR_TRADES=' "$OUT" | cut -d= -f2 || true)
          if [ -z "$EV" ] || [ -z "$TR" ]; then
            echo "Missing JOURNAL_DIR_* entries in simulator output" >&2
            echo '--- simulator stdout ---'
            cat "$OUT"
            exit 2
          fi
          RUN_DIR=$(dirname "$EV")
          test -f "$EV" && test -f "$TR" || { echo 'Missing events/trades'; exit 2; }
          mkdir -p artifacts/verify-strict
          cp "$OUT" artifacts/verify-strict/sim.log
          printf 'run_dir=%s\nevents=%s\ntrades=%s\n' "$RUN_DIR" "$EV" "$TR" > artifacts/verify-strict/env.sanity
          echo "Events size: $(wc -l < "$EV") lines"; echo "Trades size: $(wc -l < "$TR") lines"
          echo "[Step] Locate parity artifact (if any)"
          PARITY_HASH="$(find "$ROOT/artifacts/parity" -type f -name hashes.txt 2>/dev/null | sort | tail -n1 || true)"
          if [ -f "$PARITY_HASH" ]; then echo "Found parity hashes: $PARITY_HASH"; cat "$PARITY_HASH"; else echo "No parity hashes.txt found (expected if parity feature not triggered)"; fi
          echo "[Step] Strict verify"
          set +e
          VERIFY_JSON=$(dotnet exec "$TOOLS" verify strict --events "$EV" --trades "$TR" --schema 1.3.0 --json)
          EC=$?
          set -e
          echo "::group::STRICT VERIFY JSON"; echo "$VERIFY_JSON"; echo "::endgroup::"
          cp "$EV" "$TR" artifacts/verify-strict/
          if [ $EC -ne 0 ]; then
            echo "Verifier exit code=$EC"; exit $EC
          fi
      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-strict-artifacts
          path: artifacts/verify-strict