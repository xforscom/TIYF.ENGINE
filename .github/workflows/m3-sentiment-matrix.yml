name: m3-sentiment-matrix

on:
  push:
    branches: [ feat/m3-active ]
  pull_request:
    branches: [ feat/m3-active ]
  workflow_dispatch: {}

jobs:
  sentiment:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    strategy:
      fail-fast: false
      matrix:
        mode: [off, shadow, active]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Ensure jq tool
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            mkdir -p "$HOME/.local/bin"
            curl -sSL "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64" -o "$HOME/.local/bin/jq"
            chmod +x "$HOME/.local/bin/jq"
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          fi
      - name: Restore
        run: dotnet restore
      - name: Build Release
        run: dotnet build -c Release --no-restore
      - name: Prepare Config & Run (${{ matrix.mode }})
        env:
          MODE: ${{ matrix.mode }}
        run: |
          set -euo pipefail
          CFG=tests/fixtures/backtest_m0/config.backtest-m0.candidate.json
          TEMP_CFG=$(mktemp /tmp/sentiment-XXXX.json)
          if [ "$MODE" = "active" ]; then
            jq '.featureFlags.sentiment="active" | .featureFlags.riskProbe="disabled" | .sentimentConfig={"window":5,"volGuardSigma":1e-7}' "$CFG" > "$TEMP_CFG"
          elif [ "$MODE" = "shadow" ]; then
            jq '.featureFlags.sentiment="shadow" | .featureFlags.riskProbe="disabled" | .sentimentConfig={"window":5,"volGuardSigma":1e-7}' "$CFG" > "$TEMP_CFG"
          else
            jq '.featureFlags.sentiment="off" | .featureFlags.riskProbe="disabled"' "$CFG" > "$TEMP_CFG"
          fi
          dotnet exec src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll --config "$TEMP_CFG" --run-id CI-$MODE --quiet
          mkdir -p artifacts/$MODE
          cp -r journals/M0/*CI-$MODE* artifacts/$MODE/ || true
          # copy parity artifacts
          if [ -d artifacts/parity ]; then cp -r artifacts/parity artifacts/$MODE/ || true; fi
      - name: Upload journals (${{ matrix.mode }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: journals-${{ matrix.mode }}
          path: artifacts/${{ matrix.mode }}

  invariants:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    needs: sentiment
    steps:
      - uses: actions/checkout@v4
      - name: Download journals artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded
          pattern: journals-*
          merge-multiple: true
      - name: Prepare journals workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p journals/M0 artifacts/parity
          found=0
          for entry in downloaded/*; do
            [ -d "$entry" ] || continue
            name=$(basename "$entry")
            if [[ "$name" == M0-RUN-CI-* ]]; then
              echo "Staging journals from $name"
              cp -r "$entry" journals/M0/
              found=1
              continue
            fi
            if [ "$name" = "parity" ]; then
              echo "Copying parity artifacts"
              cp -r "$entry/." artifacts/parity/ || true
            fi
          done
          if [ "$found" -eq 0 ]; then
            echo "No CI journal directories located in downloaded/" >&2
            ls -R downloaded || true
            exit 1
          fi
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build Release
        run: dotnet build -c Release --no-restore
      - name: Validate Cross-Mode Invariants
        run: |
          set -euo pipefail
          ROOT=journals/M0
          OFF_EVENTS=$(ls $ROOT/*CI-off*/events.csv)
          SHADOW_EVENTS=$(ls $ROOT/*CI-shadow*/events.csv)
          ACTIVE_EVENTS=$(ls $ROOT/*CI-active*/events.csv)
          OFF_TRADES=$(ls $ROOT/*CI-off*/trades.csv)
          SHADOW_TRADES=$(ls $ROOT/*CI-shadow*/trades.csv)
          ACTIVE_TRADES=$(ls $ROOT/*CI-active*/trades.csv)
          # Parity hash files (fail if missing)
          find artifacts/parity -maxdepth 2 -name hashes.txt -print || echo "No parity artifacts found"
          if [ ! -d artifacts/parity ]; then echo "ERROR: parity artifacts directory missing"; exit 1; fi
          # Off vs shadow trades hash equality (using parity hashes)
          OFF_HASH_FILE="artifacts/parity/CI-off/hashes.txt"
          SHADOW_HASH_FILE="artifacts/parity/CI-shadow/hashes.txt"
          ACTIVE_HASH_FILE="artifacts/parity/CI-active/hashes.txt"
          for file in "$OFF_HASH_FILE" "$SHADOW_HASH_FILE" "$ACTIVE_HASH_FILE"; do
            if [ ! -f "$file" ]; then
              echo "ERROR: missing parity hash file $file"
              ls -R artifacts/parity || true
              exit 1
            fi
          done
          get_val(){ grep "^$1=" "$2" | head -n1 | cut -d'=' -f2; }
          OFF_TR_SHA=$(get_val trades_sha "$OFF_HASH_FILE")
          SHADOW_TR_SHA=$(get_val trades_sha "$SHADOW_HASH_FILE")
          ACTIVE_TR_SHA=$(get_val trades_sha "$ACTIVE_HASH_FILE")
          ACTIVE_APPLIED=$(get_val applied_count "$ACTIVE_HASH_FILE")
          ACTIVE_PENALTY=$(get_val penalty_count "$ACTIVE_HASH_FILE")
          hash_skip_meta(){ tail -n +2 "$1" | sha256sum | cut -d' ' -f1; }
          if [ "$(hash_skip_meta "$OFF_TRADES")" != "$(hash_skip_meta "$SHADOW_TRADES")" ]; then echo 'ERROR: off vs shadow trades mismatch'; exit 1; fi
          if grep -q INFO_SENTIMENT_Z_V1 "$OFF_EVENTS"; then echo 'ERROR: off mode has Z events'; exit 1; fi
          if ! grep -q INFO_SENTIMENT_Z_V1 "$SHADOW_EVENTS"; then echo 'ERROR: shadow missing Z events'; exit 1; fi
          if grep -q INFO_SENTIMENT_APPLIED_V1 "$ACTIVE_EVENTS"; then
            if diff <(tail -n +3 "$ACTIVE_EVENTS") <(tail -n +3 "$SHADOW_EVENTS") >/dev/null; then echo 'ERROR: expected divergence after clamp'; exit 1; fi
          fi
          if [ "$OFF_TR_SHA" != "$SHADOW_TR_SHA" ]; then echo "ERROR: parity trades_sha mismatch off vs shadow ($OFF_TR_SHA vs $SHADOW_TR_SHA)"; exit 1; fi
          if [ "$ACTIVE_TR_SHA" != "$OFF_TR_SHA" ] && [ "${ACTIVE_APPLIED:-0}" -eq 0 ] && [ "${ACTIVE_PENALTY:-0}" -eq 0 ]; then echo "ERROR: active trades_sha diverged without applied or penalty counts"; exit 1; fi
      - name: Upload All Journals (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: journals-all
          path: journals/M0
