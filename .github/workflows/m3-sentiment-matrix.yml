name: m3-sentiment-matrix

on:
  push:
    branches: [ main, feat/m3-active ]
  pull_request:
    branches: [ main, feat/m3-active ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      sim_path: ${{ steps.locate.outputs.sim_path }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build Release (all)
        run: dotnet build -c Release --no-restore
      - name: Build Tools (explicit)
        run: dotnet build src/TiYf.Engine.Tools/TiYf.Engine.Tools.csproj -c Release --no-restore --nologo
      - name: Guard Tools Release DLL
        run: |
          set -euo pipefail
          TOOLS=src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll
          if [ ! -f "$TOOLS" ]; then
            echo "ERROR: Expected Tools DLL at $TOOLS after Release build" >&2
            ls -R src/TiYf.Engine.Tools/bin || true
            exit 1
          fi
      - name: Run Tests
        run: dotnet test -c Release --no-build --no-restore
      - name: Clean Working Tree (no diffs / untracked) # strict guard
        run: |
          set -euo pipefail
          git diff --exit-code
          test $(git ls-files --others --exclude-standard | wc -l) -eq 0
      - name: Locate Sim Binary
        id: locate
        run: |
          echo "sim_path=src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll" >> $GITHUB_OUTPUT
      - name: Archive Release Binaries
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries
          path: |
            src/**/bin/Release/net8.0/*.dll
            src/**/bin/Release/net8.0/*.exe
            src/**/bin/Release/net8.0/*.runtimeconfig.json
            src/**/bin/Release/net8.0/*.deps.json

  sentiment:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mode: [off, shadow, active]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Download Release Binaries
        uses: actions/download-artifact@v4
        with:
          name: release-binaries
      - name: Prepare Config & Run (${{ matrix.mode }})
        env:
          MODE: ${{ matrix.mode }}
        run: |
          set -euo pipefail
          echo "Listing artifact root (first 200 entries)"; find . -maxdepth 6 -type f | head -n 200
          CFG=tests/fixtures/backtest_m0/config.backtest-m0.candidate.json
          TEMP_CFG=$(mktemp /tmp/sentiment-XXXX.json)
          if ! command -v jq >/dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi
          if [ "$MODE" = "active" ]; then
            jq '.featureFlags.sentiment="active" | .featureFlags.riskProbe="disabled" | .sentimentConfig={"window":5,"volGuardSigma":1e-7}' "$CFG" > "$TEMP_CFG"
          elif [ "$MODE" = "shadow" ]; then
            jq '.featureFlags.sentiment="shadow" | .featureFlags.riskProbe="disabled" | .sentimentConfig={"window":5,"volGuardSigma":1e-7}' "$CFG" > "$TEMP_CFG"
          else
            jq '.featureFlags.sentiment="off" | .featureFlags.riskProbe="disabled"' "$CFG" > "$TEMP_CFG"
          fi
          SIM_CANON=src/TiYf.Engine.Sim/bin/Release/net8.0/TiYf.Engine.Sim.dll
          if [ -f "$SIM_CANON" ]; then SIM_DLL="$SIM_CANON"; else SIM_DLL=$(find . -name TiYf.Engine.Sim.dll | head -n1 || true); fi
          if [ -z "$SIM_DLL" ]; then
             echo "ERROR: TiYf.Engine.Sim.dll not found in artifact or expected path" >&2
             echo "Debug listing around expected directories:" >&2
             find . -maxdepth 6 -type d -path '*TiYf.Engine.Sim*' -print >&2 || true
             exit 1
          fi
          echo "Using SIM DLL: $SIM_DLL"
          dotnet exec "$SIM_DLL" --config "$TEMP_CFG" --run-id CI-$MODE --quiet
          mkdir -p artifacts/$MODE
          cp -r journals/M0/*CI-$MODE* artifacts/$MODE/ || true
      - name: Compute Hashes (${{ matrix.mode }})
        env:
          MODE: ${{ matrix.mode }}
        run: |
          set -euo pipefail
          RUN_DIR=$(find journals/M0 -maxdepth 1 -type d -name "*CI-$MODE*" | head -n1 || true)
          if [ -z "$RUN_DIR" ]; then echo "No run directory found for mode $MODE" >&2; exit 1; fi
          EVENTS=$RUN_DIR/events.csv
          TRADES=$RUN_DIR/trades.csv
          if [ ! -f "$EVENTS" ] || [ ! -f "$TRADES" ]; then echo "Missing events or trades file for $MODE" >&2; ls -l "$RUN_DIR"; exit 1; fi
          norm_hash(){ tail -n +2 "$1" | tr -d '\r' | sha256sum | cut -d' ' -f1; }
          events_sha=$(norm_hash "$EVENTS")
          trades_sha=$(norm_hash "$TRADES")
          trades_rows=$(( $(wc -l < "$TRADES") - 1 ))
          {
            echo "events_sha=$events_sha"
            echo "trades_sha=$trades_sha"
            echo "trades_rows=$trades_rows"
          } > artifacts/$MODE/hashes.txt
          echo "Hashes for $MODE:"; cat artifacts/$MODE/hashes.txt
      - name: Upload journals (${{ matrix.mode }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: journals-${{ matrix.mode }}
          path: artifacts/${{ matrix.mode }}
      - name: Working Tree Cleanliness (strict)
        run: |
          set -euo pipefail
          git diff --exit-code
          test $(git ls-files --others --exclude-standard | wc -l) -eq 0

  invariants:
    runs-on: ubuntu-latest
    needs: sentiment
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Download journals (off)
        uses: actions/download-artifact@v4
        with:
          name: journals-off
          path: dl/off
      - name: Download journals (shadow)
        uses: actions/download-artifact@v4
        with:
          name: journals-shadow
          path: dl/shadow
      - name: Download journals (active)
        uses: actions/download-artifact@v4
        with:
          name: journals-active
          path: dl/active
      - name: Assemble Journals Layout
        run: |
          set -euo pipefail
          mkdir -p journals/M0
          # Copy each run directory (containing events.csv) into canonical journals/M0 layout
          while IFS= read -r dir; do
            base=$(basename "$dir")
            if [ -d "journals/M0/$base" ]; then
              echo "Skipping existing $base"; continue
            fi
            echo "Assembling run directory: $base";
            cp -r "$dir" "journals/M0/$base"
          done < <(find dl -type f -name events.csv -printf '%h\n')
          echo "Resulting journals/M0 contents:";
            find journals/M0 -maxdepth 2 -type f -name events.csv -printf '%h\n' || true
      - name: Validate Cross-Mode Invariants
        run: |
          set -euo pipefail
          ROOT=journals/M0
          echo "--- Hash summaries (raw from artifacts) ---"
          cat dl/off/hashes.txt || echo "(missing off hashes)"
          cat dl/shadow/hashes.txt || echo "(missing shadow hashes)"
            cat dl/active/hashes.txt || echo "(missing active hashes)"
          OFF_EVENTS=$(ls $ROOT/*CI-off*/events.csv)
          SHADOW_EVENTS=$(ls $ROOT/*CI-shadow*/events.csv)
          ACTIVE_EVENTS=$(ls $ROOT/*CI-active*/events.csv)
          OFF_TRADES=$(ls $ROOT/*CI-off*/trades.csv)
          SHADOW_TRADES=$(ls $ROOT/*CI-shadow*/trades.csv)
          ACTIVE_TRADES=$(ls $ROOT/*CI-active*/trades.csv)
          normalize_trades(){
            awk -F',' 'NR==1{print;next}{OFS=","; $12="CONFIG_HASH_NORMALIZED"; print}' "$1" > "$2";
          }
          norm_off=$(mktemp); norm_shadow=$(mktemp)
          normalize_trades "$OFF_TRADES" "$norm_off"
          normalize_trades "$SHADOW_TRADES" "$norm_shadow"
          off_trades_sha=$(tail -n +2 "$norm_off" | sha256sum | cut -d' ' -f1)
          shadow_trades_sha=$(tail -n +2 "$norm_shadow" | sha256sum | cut -d' ' -f1)
          if [ "$off_trades_sha" != "$shadow_trades_sha" ]; then
            echo "TRADE HASH MISMATCH (normalized) off($off_trades_sha) shadow($shadow_trades_sha)" >&2
            diff -u <(head -n 1 "$norm_off"; tail -n +2 "$norm_off" | head -n 20) <(head -n 1 "$norm_shadow"; tail -n +2 "$norm_shadow" | head -n 20) || true
            echo 'ERROR: off vs shadow normalized trades mismatch'; exit 1;
          fi
          if grep -q INFO_SENTIMENT_Z_V1 "$OFF_EVENTS"; then echo 'ERROR: off mode has Z events'; exit 1; fi
          if ! grep -q INFO_SENTIMENT_Z_V1 "$SHADOW_EVENTS"; then echo 'ERROR: shadow missing Z events'; exit 1; fi
          if grep -q INFO_SENTIMENT_APPLIED_V1 "$ACTIVE_EVENTS"; then
            if diff <(tail -n +3 "$ACTIVE_EVENTS") <(tail -n +3 "$SHADOW_EVENTS") >/dev/null; then echo 'ERROR: expected divergence after clamp'; exit 1; fi
          fi
      - name: Upload All Journals (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: journals-all
          path: journals/M0
