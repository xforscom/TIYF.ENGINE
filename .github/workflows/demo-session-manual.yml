name: demo-session-manual

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID for the demo (default: DEMO-SESSION-<timestamp>)'
        required: false
        default: ''
      broker_enabled:
        description: 'Enable broker mode'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

permissions:
  contents: read
  issues: write

jobs:
  demo-session:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    defaults:
      run:
        shell: pwsh
    env:
      RUN_ID: ${{ inputs.run_id || format('DEMO-SESSION-{0}', github.run_number) }}
      BROKER_ENABLED: ${{ inputs.broker_enabled }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup .NET 8
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
        with:
          dotnet-version: '8.0.x'

      - name: Restore and build Release
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore TiYf.Engine.sln
          dotnet build TiYf.Engine.sln -c Release --no-restore --nologo

      - name: Create Demo Session Issue
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Demo Session - ${new Date().toISOString().slice(0, 19)}`;
            const body = `## Demo Session Started

            Run ID: ${process.env.RUN_ID}
            Workflow: ${context.payload.workflow_run?.html_url || 'N/A'}
            Broker Enabled: ${process.env.BROKER_ENABLED}

            ### Verification Checks
            - [ ] SIM_EXIT=0
            - [ ] STRICT_EXIT=0
            - [ ] PARITY_EXIT=0
            - [ ] broker_dangling=false

            ### Artifacts Links
            (To be updated after run)

            ---
            Auto-generated by demo-session-manual workflow.`;
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['demo-session']
            });
            core.setOutput('issue-number', issue.data.number);
            core.setOutput('issue-url', issue.data.html_url);

      - name: Run DemoFeed
        run: |
          $ErrorActionPreference = 'Stop'
          $logPath = 'demo-session.log'
          $args = @('--run-id', $env:RUN_ID)
          if ($env:BROKER_ENABLED -eq 'true') {
            $args += '--broker-enabled', 'true', '--broker-fill-mode', 'ioc-market'
          }
          dotnet exec src/TiYf.Engine.DemoFeed/bin/Release/net8.0/TiYf.Engine.DemoFeed.dll @args | Tee-Object -FilePath $logPath
          $exitCode = $LASTEXITCODE
          if ($exitCode -ne 0) { throw "DemoFeed exited with $exitCode" }
          $eventsLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_EVENTS='
          $tradesLine = Select-String -Path $logPath -Pattern '^JOURNAL_DIR_TRADES='
          $runDirLine = Select-String -Path $logPath -Pattern '^RUN_DIR='
          $infoLine = Select-String -Path $logPath -Pattern '^INFO first_ts='
          if (-not $eventsLine -or -not $tradesLine -or -not $runDirLine -or -not $infoLine) { throw "Missing output lines" }
          $eventsPath = ($eventsLine | Select-Object -First 1).Line.Split('=')[1]
          $tradesPath = ($tradesLine | Select-Object -First 1).Line.Split('=')[1]
          $runDirectory = ($runDirLine | Select-Object -First 1).Line.Split('=')[1]
          $brokerDangling = if ($infoLine -match 'broker_dangling=(true|false)') { $matches[1] } else { 'unknown' }
          "EVENTS_PATH=$eventsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TRADES_PATH=$tradesPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RUN_DIR=$runDirectory" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "BROKER_DANGLING=$brokerDangling" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Strict
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify strict --events $env:EVENTS_PATH --trades $env:TRADES_PATH --schema 1.3.0 --json | Tee-Object -FilePath 'strict.json'
          $strictExit = $LASTEXITCODE
          "STRICT_EXIT=$strictExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify Parity
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet exec src/TiYf.Engine.Tools/bin/Release/net8.0/TiYf.Engine.Tools.dll verify parity --events-a $env:EVENTS_PATH --events-b $env:EVENTS_PATH --trades-a $env:TRADES_PATH --trades-b $env:TRADES_PATH --json | Tee-Object -FilePath 'parity.json'
          $parityExit = $LASTEXITCODE
          "PARITY_EXIT=$parityExit" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Collect Artifacts
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Path 'artifacts' -Force
          Copy-Item -Path $env:EVENTS_PATH -Destination 'artifacts/events.csv' -Force
          Copy-Item -Path $env:TRADES_PATH -Destination 'artifacts/trades.csv' -Force
          Copy-Item -Path 'strict.json' -Destination 'artifacts/strict.json' -Force
          Copy-Item -Path 'parity.json' -Destination 'artifacts/parity.json' -Force
          Copy-Item -Path 'demo-session.log' -Destination 'artifacts/demo-session.log' -Force

      - name: Upload Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-session-${{ env.RUN_ID }}
          path: artifacts/**

      - name: Update Issue with Results
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ steps.create-issue.outputs.issue-number }}
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER;
            const runUrl = context.payload.workflow_run?.html_url || 'N/A';
            const artifactsUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const simExit = 0; // Assuming success
            const strictExit = process.env.STRICT_EXIT;
            const parityExit = process.env.PARITY_EXIT;
            const brokerDangling = process.env.BROKER_DANGLING;
            const comment = `## Demo Session Completed

            - SIM_EXIT=${simExit}
            - STRICT_EXIT=${strictExit}
            - PARITY_EXIT=${parityExit}
            - broker_dangling=${brokerDangling}

            Artifacts: ${artifactsUrl}
            Workflow Run: ${runUrl}

            ### Verification Checks
            - [${simExit == 0 ? 'x' : ' '}] SIM_EXIT=0
            - [${strictExit == 0 ? 'x' : ' '}] STRICT_EXIT=0
            - [${parityExit == 0 ? 'x' : ' '}] PARITY_EXIT=0
            - [${brokerDangling == 'false' ? 'x' : ' '}] broker_dangling=false

            ### Artifacts Links
            - [events.csv](${artifactsUrl}#artifacts)
            - [trades.csv](${artifactsUrl}#artifacts)
            - [strict.json](${artifactsUrl}#artifacts)
            - [parity.json](${artifactsUrl}#artifacts)
            - [demo-session.log](${artifactsUrl}#artifacts)`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });