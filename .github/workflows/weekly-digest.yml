name: weekly-digest

on:
  schedule:
    - cron: '0 9 * * 0'
  workflow_dispatch:
  workflow_call:
    secrets:
      DEMO_ALERT_WEBHOOK_PROD:
        required: true

permissions:
  contents: read

concurrency:
  group: weekly-digest-${{ github.ref }}
  cancel-in-progress: true

jobs:
  compile-digest:
    runs-on: [self-hosted, Linux, X64, tiyf-vps]
    timeout-minutes: 20
    defaults:
      run:
        shell: pwsh
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WORKFLOW_ID: demo-daily-oanda.yml
      SCRATCH_DIR: scratch
    steps:
      - name: Install PowerShell 7
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          POWERSHELL_VERSION="7.4.6"
          INSTALL_ROOT="$HOME/powershell"

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
            exit 0
          fi

          if [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
            exit 0
          fi

          mkdir -p "$INSTALL_ROOT"
          curl -fSLo powershell.tar.gz "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz"
          curl -fSLo checksums.txt "https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/SHA256SUMS"
          EXPECTED_SUM="$(grep "powershell-${POWERSHELL_VERSION}-linux-x64.tar.gz" checksums.txt | awk '{print $1}')"
          if [ -z "$EXPECTED_SUM" ]; then
            echo "ERROR: Unable to locate expected checksum for PowerShell archive" >&2
            exit 1
          fi
          ACTUAL_SUM="$(sha256sum powershell.tar.gz | awk '{print $1}')"
          if [ "$EXPECTED_SUM" != "$ACTUAL_SUM" ]; then
            echo "ERROR: Checksum verification failed for powershell.tar.gz" >&2
            echo "Expected: $EXPECTED_SUM" >&2
            echo "Actual:   $ACTUAL_SUM" >&2
            exit 1
          fi
          tar -xzf powershell.tar.gz -C "$INSTALL_ROOT"
          rm powershell.tar.gz checksums.txt

          if [ -x "$INSTALL_ROOT/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/pwsh"
            echo "$INSTALL_ROOT" >> "$GITHUB_PATH"
          elif [ -x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh" ]; then
            chmod +x "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64/pwsh"
            echo "$INSTALL_ROOT/powershell-${POWERSHELL_VERSION}-linux-x64" >> "$GITHUB_PATH"
          else
            echo "Failed to locate pwsh after extraction" >&2
            find "$INSTALL_ROOT" -maxdepth 3 -type f -name 'pwsh' -print || true
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare scratch
        run: |
          $ErrorActionPreference = 'Stop'
          if (Test-Path $env:SCRATCH_DIR) {
            Remove-Item -Recurse -Force $env:SCRATCH_DIR
          }
          New-Item -ItemType Directory -Force -Path $env:SCRATCH_DIR | Out-Null

      - name: Build digest payload
        id: digest
        run: |
          $ErrorActionPreference = 'Stop'
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $token = $env:GITHUB_TOKEN
          if ([string]::IsNullOrWhiteSpace($token)) {
            throw "GITHUB_TOKEN unavailable"
          }
          $repoParts = $env:GITHUB_REPOSITORY -split '/'
          $owner = $repoParts[0]
          $repo = $repoParts[1]
          $baseUri = 'https://api.github.com'
          $headers = @{
            Authorization = "Bearer $token"
            Accept = 'application/vnd.github+json'
            'X-GitHub-Api-Version' = '2022-11-28'
            'User-Agent' = "$owner-$repo-weekly-digest"
          }

          $workflowId = $env:WORKFLOW_ID
          $runsUri = "$baseUri/repos/$owner/$repo/actions/workflows/$workflowId/runs?branch=main&status=success&per_page=15"
          $runsResponse = Invoke-RestMethod -Uri $runsUri -Headers $headers -Method Get
          $runs = $runsResponse.workflow_runs
          if (-not $runs -or $runs.Count -eq 0) {
            throw "No successful runs found for $workflowId on main"
          }

          $selected = $runs | Sort-Object -Property @{ Expression = { [DateTimeOffset]::Parse($_.run_started_at) } ; Descending = $true } | Select-Object -First 5
          if (-not $selected -or $selected.Count -eq 0) {
            throw "Unable to select successful runs for digest"
          }

          $lines = New-Object System.Collections.Generic.List[object]

          foreach ($run in $selected) {
            $runId = [int64]$run.id
            $runUrl = $run.html_url
            $runStarted = [DateTimeOffset]::Parse($run.run_started_at).UtcDateTime.ToString('yyyy-MM-dd HH:mm:ss\Z')

            $artifactUri = "$baseUri/repos/$owner/$repo/actions/runs/$runId/artifacts?per_page=20"
            $artifactResponse = Invoke-RestMethod -Uri $artifactUri -Headers $headers -Method Get
            $artifact = $artifactResponse.artifacts | Where-Object { $_.name -eq 'vps-demo-artifacts-adapter-oanda-demo' } | Select-Object -First 1
            if (-not $artifact) {
              throw "Required artifact 'vps-demo-artifacts-adapter-oanda-demo' missing for run $runId"
            }

            $zipPath = Join-Path $env:SCRATCH_DIR "artifact-$runId.zip"
            $downloadUri = "$baseUri/repos/$owner/$repo/actions/artifacts/$($artifact.id)/zip"
            Invoke-WebRequest -Uri $downloadUri -Headers $headers -OutFile $zipPath | Out-Null

            $extractDir = Join-Path $env:SCRATCH_DIR "artifact-$runId"
            if (Test-Path $extractDir) {
              Remove-Item -Recurse -Force $extractDir
            }
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractDir)

            $summaryPath = Get-ChildItem -Path $extractDir -Filter 'summary.md' -Recurse | Select-Object -First 1
            if (-not $summaryPath) {
              throw "summary.md not located for run $runId"
            }

            $summaryContent = Get-Content -Path $summaryPath.FullName
            $eventsLine = $summaryContent | Where-Object { $_ -match 'events_sha=' } | Select-Object -First 1
            $tradesLine = $summaryContent | Where-Object { $_ -match 'trades_sha=' } | Select-Object -First 1
            if (-not $eventsLine -or -not $tradesLine) {
              throw "Failed to read events/trades SHA from summary for run $runId"
            }

            $eventsSha = ($eventsLine -split 'events_sha=')[-1].Trim()
            $tradesSha = ($tradesLine -split 'trades_sha=')[-1].Trim()

            $lines.Add([pscustomobject]@{
              Started   = $runStarted
              Url       = $runUrl
              EventsSha = $eventsSha
              TradesSha = $tradesSha
            })
          }

          if ($lines.Count -eq 0) {
            throw "No digest entries were produced"
          }

          $digestLines = $lines | ForEach-Object { "{0} {1} events={2} trades={3}" -f $_.Started, $_.Url, $_.EventsSha, $_.TradesSha }
          $digestText = $digestLines -join [Environment]::NewLine
          $summaryPath = Join-Path $env:SCRATCH_DIR 'weekly-digest.txt'
          Set-Content -Path $summaryPath -Value $digestText -Encoding UTF8

          $payload = @{
            content = "Weekly OANDA digest`n" + $digestText
          } | ConvertTo-Json -Compress

          "DIGEST_PAYLOAD=$payload" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DIGEST_TEXT_PATH=$summaryPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Post digest to Discord
        env:
          WEBHOOK_PROD: ${{ secrets.DEMO_ALERT_WEBHOOK_PROD }}
        run: |
          $ErrorActionPreference = 'Stop'
          $webhook = $env:WEBHOOK_PROD
          if ([string]::IsNullOrWhiteSpace($webhook) -or $webhook -eq 'null') {
            throw "DEMO_ALERT_WEBHOOK_PROD webhook is required for weekly digest"
          }
          $payload = $env:DIGEST_PAYLOAD
          if ([string]::IsNullOrWhiteSpace($payload)) {
            throw "Digest payload not generated"
          }
          try {
            $response = Invoke-WebRequest -Uri $webhook -Method Post -Body $payload -ContentType 'application/json'
            $status = [int]$response.StatusCode
            Write-Host "Discord webhook HTTP status: $status"
            "DIGEST_HTTP_STATUS=$status" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } catch {
            $statusCode = 'unknown'
            if ($_.Exception.Response -and $null -ne $_.Exception.Response.StatusCode) {
              $statusCode = [int]$_.Exception.Response.StatusCode
            }
            "DIGEST_HTTP_STATUS=$statusCode" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            throw
          }

      - name: Summarize digest
        run: |
          $ErrorActionPreference = 'Stop'
          $textPath = $env:DIGEST_TEXT_PATH
          if (-not (Test-Path $textPath)) {
            throw "Digest text file missing at $textPath"
          }
          $text = Get-Content -Path $textPath
          $status = $env:DIGEST_HTTP_STATUS
          $summary = @(
            '## Weekly OANDA digest',
            '',
            "Webhook status: $status",
            '',
            '```text',
            $text,
            '```'
          )
          $summary | ForEach-Object { Add-Content -Encoding UTF8 -Path $env:GITHUB_STEP_SUMMARY -Value $_ }
          Set-Content -Path (Join-Path $env:SCRATCH_DIR 'summary.md') -Value ($summary -join [Environment]::NewLine) -Encoding UTF8

      - name: Upload digest artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: |
            ${{ env.SCRATCH_DIR }}/weekly-digest.txt
            ${{ env.SCRATCH_DIR }}/summary.md
